// Mocks generated by Mockito 5.4.5 from annotations
// in dart2d/test/lib/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i15;
import 'dart:math' as _i6;

import 'package:dart2d/bindings/annotations.dart' as _i8;
import 'package:dart2d/net/connection.dart' as _i9;
import 'package:dart2d/net/helpers.dart' as _i13;
import 'package:dart2d/net/net.dart' as _i11;
import 'package:dart2d/net/peer.dart' as _i5;
import 'package:dart2d/phys/vec2.dart' as _i7;
import 'package:dart2d/res/imageindex.dart' as _i12;
import 'package:dart2d/sprites/sprites.dart' as _i10;
import 'package:dart2d/util/util.dart' as _i4;
import 'package:dart2d/weapons/weapon_state.dart' as _i16;
import 'package:dart2d/worlds/worlds.dart' as _i3;
import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWormWorld_1 extends _i1.SmartFake implements _i3.WormWorld {
  _FakeWormWorld_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGameState_2 extends _i1.SmartFake implements _i4.GameState {
  _FakeGameState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerWrapper_3 extends _i1.SmartFake implements _i5.PeerWrapper {
  _FakePeerWrapper_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePoint_4<T extends num> extends _i1.SmartFake
    implements _i6.Point<T> {
  _FakePoint_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVec2_5 extends _i1.SmartFake implements _i7.Vec2 {
  _FakeVec2_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeServerChannel_6 extends _i1.SmartFake implements _i8.ServerChannel {
  _FakeServerChannel_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnectionWrapper_7 extends _i1.SmartFake
    implements _i9.ConnectionWrapper {
  _FakeConnectionWrapper_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoader_8 extends _i1.SmartFake implements _i3.Loader {
  _FakeLoader_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSpriteIndex_9 extends _i1.SmartFake implements _i10.SpriteIndex {
  _FakeSpriteIndex_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyState_10 extends _i1.SmartFake implements _i4.KeyState {
  _FakeKeyState_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHudMessages_11 extends _i1.SmartFake implements _i4.HudMessages {
  _FakeHudMessages_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeByteWorld_12 extends _i1.SmartFake implements _i3.ByteWorld {
  _FakeByteWorld_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetwork_13 extends _i1.SmartFake implements _i11.Network {
  _FakeNetwork_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeImageIndex_14 extends _i1.SmartFake implements _i12.ImageIndex {
  _FakeImageIndex_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFpsCounter_15 extends _i1.SmartFake implements _i4.FpsCounter {
  _FakeFpsCounter_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandom_16 extends _i1.SmartFake implements _i6.Random {
  _FakeRandom_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_17 extends _i1.SmartFake implements Duration {
  _FakeDuration_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReliableHelper_18 extends _i1.SmartFake
    implements _i13.ReliableHelper {
  _FakeReliableHelper_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_19 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlayerInfo_20 extends _i1.SmartFake implements _i4.PlayerInfo {
  _FakePlayerInfo_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovingSprite_21 extends _i1.SmartFake implements _i10.MovingSprite {
  _FakeMovingSprite_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDataCounter_22 extends _i1.SmartFake implements _i11.DataCounter {
  _FakeDataCounter_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ImageIndex].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageIndex extends _i1.Mock implements _i12.ImageIndex {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  Map<String, int> get imageByName =>
      (super.noSuchMethod(
            Invocation.getter(#imageByName),
            returnValue: <String, int>{},
            returnValueForMissingStub: <String, int>{},
          )
          as Map<String, int>);

  @override
  set imageByName(Map<String, int>? _imageByName) => super.noSuchMethod(
    Invocation.setter(#imageByName, _imageByName),
    returnValueForMissingStub: null,
  );

  @override
  Map<int, bool> get loadedImages =>
      (super.noSuchMethod(
            Invocation.getter(#loadedImages),
            returnValue: <int, bool>{},
            returnValueForMissingStub: <int, bool>{},
          )
          as Map<int, bool>);

  @override
  set loadedImages(Map<int, bool>? _loadedImages) => super.noSuchMethod(
    Invocation.setter(#loadedImages, _loadedImages),
    returnValueForMissingStub: null,
  );

  @override
  List<dynamic> get images =>
      (super.noSuchMethod(
            Invocation.getter(#images),
            returnValue: <dynamic>[],
            returnValueForMissingStub: <dynamic>[],
          )
          as List<dynamic>);

  @override
  set images(List<dynamic>? _images) => super.noSuchMethod(
    Invocation.setter(#images, _images),
    returnValueForMissingStub: null,
  );

  @override
  dynamic addEmptyImageForTest(String? name) => super.noSuchMethod(
    Invocation.method(#addEmptyImageForTest, [name]),
    returnValueForMissingStub: null,
  );

  @override
  dynamic getImageByName(String? name) => super.noSuchMethod(
    Invocation.method(#getImageByName, [name]),
    returnValueForMissingStub: null,
  );

  @override
  int getImageIdByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getImageIdByName, [name]),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  dynamic getImageById(int? id) => super.noSuchMethod(
    Invocation.method(#getImageById, [id]),
    returnValueForMissingStub: null,
  );

  @override
  bool finishedLoadingImages() =>
      (super.noSuchMethod(
            Invocation.method(#finishedLoadingImages, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool playerResourcesLoaded() =>
      (super.noSuchMethod(
            Invocation.method(#playerResourcesLoaded, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool worldResourcesLoaded() =>
      (super.noSuchMethod(
            Invocation.method(#worldResourcesLoaded, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool gameResourcesLoaded() =>
      (super.noSuchMethod(
            Invocation.method(#gameResourcesLoaded, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<int> orderedImageIds() =>
      (super.noSuchMethod(
            Invocation.method(#orderedImageIds, []),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  String imagesLoadedString() =>
      (super.noSuchMethod(
            Invocation.method(#imagesLoadedString, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#imagesLoadedString, []),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#imagesLoadedString, []),
            ),
          )
          as String);

  @override
  dynamic addImagesFromServer([String? path = './img/']) => super.noSuchMethod(
    Invocation.method(#addImagesFromServer, [path]),
    returnValueForMissingStub: null,
  );

  @override
  _i15.Future<dynamic> addFromImageData(int? index, String? data) =>
      (super.noSuchMethod(
            Invocation.method(#addFromImageData, [index, data]),
            returnValue: _i15.Future<dynamic>.value(),
            returnValueForMissingStub: _i15.Future<dynamic>.value(),
          )
          as _i15.Future<dynamic>);

  @override
  void addImagesFromNetwork() => super.noSuchMethod(
    Invocation.method(#addImagesFromNetwork, []),
    returnValueForMissingStub: null,
  );

  @override
  bool imagesIndexed() =>
      (super.noSuchMethod(
            Invocation.method(#imagesIndexed, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String getImageDataUrl(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#getImageDataUrl, [index]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#getImageDataUrl, [index]),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#getImageDataUrl, [index]),
            ),
          )
          as String);

  @override
  _i15.Future<dynamic> addSingleImage(
    String? imgName, [
    String? path = './img/',
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#addSingleImage, [imgName, path]),
            returnValue: _i15.Future<dynamic>.value(),
            returnValueForMissingStub: _i15.Future<dynamic>.value(),
          )
          as _i15.Future<dynamic>);

  @override
  String imageNameFromIndex(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#imageNameFromIndex, [index]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#imageNameFromIndex, [index]),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#imageNameFromIndex, [index]),
            ),
          )
          as String);

  @override
  Map<String, int> allImagesByName() =>
      (super.noSuchMethod(
            Invocation.method(#allImagesByName, []),
            returnValue: <String, int>{},
            returnValueForMissingStub: <String, int>{},
          )
          as Map<String, int>);

  @override
  bool imageIsLoaded(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#imageIsLoaded, [index]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void clearImageLoader(int? index) => super.noSuchMethod(
    Invocation.method(#clearImageLoader, [index]),
    returnValueForMissingStub: null,
  );

  @override
  bool imageNameIsLoaded(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#imageNameIsLoaded, [name]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i11.Network {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i3.WormWorld get world =>
      (super.noSuchMethod(
            Invocation.getter(#world),
            returnValue: _FakeWormWorld_1(this, Invocation.getter(#world)),
            returnValueForMissingStub: _FakeWormWorld_1(
              this,
              Invocation.getter(#world),
            ),
          )
          as _i3.WormWorld);

  @override
  set world(_i3.WormWorld? _world) => super.noSuchMethod(
    Invocation.setter(#world, _world),
    returnValueForMissingStub: null,
  );

  @override
  _i4.GameState get gameState =>
      (super.noSuchMethod(
            Invocation.getter(#gameState),
            returnValue: _FakeGameState_2(this, Invocation.getter(#gameState)),
            returnValueForMissingStub: _FakeGameState_2(
              this,
              Invocation.getter(#gameState),
            ),
          )
          as _i4.GameState);

  @override
  set gameState(_i4.GameState? _gameState) => super.noSuchMethod(
    Invocation.setter(#gameState, _gameState),
    returnValueForMissingStub: null,
  );

  @override
  _i5.PeerWrapper get peer =>
      (super.noSuchMethod(
            Invocation.getter(#peer),
            returnValue: _FakePeerWrapper_3(this, Invocation.getter(#peer)),
            returnValueForMissingStub: _FakePeerWrapper_3(
              this,
              Invocation.getter(#peer),
            ),
          )
          as _i5.PeerWrapper);

  @override
  set peer(_i5.PeerWrapper? _peer) => super.noSuchMethod(
    Invocation.setter(#peer, _peer),
    returnValueForMissingStub: null,
  );

  @override
  int get serverFramesBehind =>
      (super.noSuchMethod(
            Invocation.getter(#serverFramesBehind),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set serverFramesBehind(int? _serverFramesBehind) => super.noSuchMethod(
    Invocation.setter(#serverFramesBehind, _serverFramesBehind),
    returnValueForMissingStub: null,
  );

  @override
  String? findNewCommander(
    Map<dynamic, dynamic>? connections, [
    bool? ignoreSelf = false,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#findNewCommander, [connections, ignoreSelf]),
            returnValueForMissingStub: null,
          )
          as String?);

  @override
  void resetGameConnections() => super.noSuchMethod(
    Invocation.method(#resetGameConnections, []),
    returnValueForMissingStub: null,
  );

  @override
  void convertToCommander(
    Map<String, _i9.ConnectionWrapper>? connections,
    _i4.PlayerInfo? previousCommanderPlayerInfo,
  ) => super.noSuchMethod(
    Invocation.method(#convertToCommander, [
      connections,
      previousCommanderPlayerInfo,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.PeerWrapper getPeer() =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, []),
            returnValue: _FakePeerWrapper_3(
              this,
              Invocation.method(#getPeer, []),
            ),
            returnValueForMissingStub: _FakePeerWrapper_3(
              this,
              Invocation.method(#getPeer, []),
            ),
          )
          as _i5.PeerWrapper);

  @override
  _i4.GameState getGameState() =>
      (super.noSuchMethod(
            Invocation.method(#getGameState, []),
            returnValue: _FakeGameState_2(
              this,
              Invocation.method(#getGameState, []),
            ),
            returnValueForMissingStub: _FakeGameState_2(
              this,
              Invocation.method(#getGameState, []),
            ),
          )
          as _i4.GameState);

  @override
  Map<String, _i9.ConnectionWrapper> safeActiveConnections() =>
      (super.noSuchMethod(
            Invocation.method(#safeActiveConnections, []),
            returnValue: <String, _i9.ConnectionWrapper>{},
            returnValueForMissingStub: <String, _i9.ConnectionWrapper>{},
          )
          as Map<String, _i9.ConnectionWrapper>);

  @override
  bool findServer() =>
      (super.noSuchMethod(
            Invocation.method(#findServer, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasNetworkProblem() =>
      (super.noSuchMethod(
            Invocation.method(#hasNetworkProblem, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void sendMessage(String? message, [String? dontSendTo]) => super.noSuchMethod(
    Invocation.method(#sendMessage, [message, dontSendTo]),
    returnValueForMissingStub: null,
  );

  @override
  void maybeSendLocalKeyStateUpdate() => super.noSuchMethod(
    Invocation.method(#maybeSendLocalKeyStateUpdate, []),
    returnValueForMissingStub: null,
  );

  @override
  void frame(double? duration, List<int>? removals) => super.noSuchMethod(
    Invocation.method(#frame, [duration, removals]),
    returnValueForMissingStub: null,
  );

  @override
  void setPendingCommandTransferForTest(String? pendingCommandTransfer) =>
      super.noSuchMethod(
        Invocation.method(#setPendingCommandTransferForTest, [
          pendingCommandTransfer,
        ]),
        returnValueForMissingStub: null,
      );

  @override
  bool isCommander() =>
      (super.noSuchMethod(
            Invocation.method(#isCommander, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void setAsActingCommander() => super.noSuchMethod(
    Invocation.method(#setAsActingCommander, []),
    returnValueForMissingStub: null,
  );

  @override
  int slowCommandingFrames() =>
      (super.noSuchMethod(
            Invocation.method(#slowCommandingFrames, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool isTooSlowForCommanding() =>
      (super.noSuchMethod(
            Invocation.method(#isTooSlowForCommanding, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasReadyConnection() =>
      (super.noSuchMethod(
            Invocation.method(#hasReadyConnection, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasOpenConnection() =>
      (super.noSuchMethod(
            Invocation.method(#hasOpenConnection, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<String> keyFrameDebugData() =>
      (super.noSuchMethod(
            Invocation.method(#keyFrameDebugData, []),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as List<String>);

  @override
  void parseBundle(
    _i9.ConnectionWrapper? connection,
    Map<String, dynamic>? bundle,
  ) => super.noSuchMethod(
    Invocation.method(#parseBundle, [connection, bundle]),
    returnValueForMissingStub: null,
  );

  @override
  void stateBundle(
    bool? keyFrame,
    Map<dynamic, dynamic>? allData,
    List<int>? removals,
  ) => super.noSuchMethod(
    Invocation.method(#stateBundle, [keyFrame, allData, removals]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HudMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockHudMessages extends _i1.Mock implements _i4.HudMessages {
  @override
  List<_i4.HudMessage> get messages =>
      (super.noSuchMethod(
            Invocation.getter(#messages),
            returnValue: <_i4.HudMessage>[],
            returnValueForMissingStub: <_i4.HudMessage>[],
          )
          as List<_i4.HudMessage>);

  @override
  set messages(List<_i4.HudMessage>? _messages) => super.noSuchMethod(
    Invocation.setter(#messages, _messages),
    returnValueForMissingStub: null,
  );

  @override
  void display(String? message, [double? period = 4.0]) => super.noSuchMethod(
    Invocation.method(#display, [message, period]),
    returnValueForMissingStub: null,
  );

  @override
  bool shouldDrawTable() =>
      (super.noSuchMethod(
            Invocation.method(#shouldDrawTable, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void showGameTable(_i3.WormWorld? world, dynamic context) =>
      super.noSuchMethod(
        Invocation.method(#showGameTable, [world, context]),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i3.WormWorld? world, dynamic context, double? timeSpent) =>
      super.noSuchMethod(
        Invocation.method(#render, [world, context, timeSpent]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PacketListenerBindings].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacketListenerBindings extends _i1.Mock
    implements _i13.PacketListenerBindings {
  @override
  dynamic bindHandler(String? key, dynamic handler) => super.noSuchMethod(
    Invocation.method(#bindHandler, [key, handler]),
    returnValueForMissingStub: null,
  );

  @override
  List<dynamic> handlerFor(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#handlerFor, [key]),
            returnValue: <dynamic>[],
            returnValueForMissingStub: <dynamic>[],
          )
          as List<dynamic>);

  @override
  bool hasHandler(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#hasHandler, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [ConnectionFrameHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionFrameHandler extends _i1.Mock
    implements _i13.ConnectionFrameHandler {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  dynamic reportConnectionMetrics(int? framesBehind, int? latencyMillis) =>
      super.noSuchMethod(
        Invocation.method(#reportConnectionMetrics, [
          framesBehind,
          latencyMillis,
        ]),
        returnValueForMissingStub: null,
      );

  @override
  bool tick(double? duration) =>
      (super.noSuchMethod(
            Invocation.method(#tick, [duration]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool keyFrame() =>
      (super.noSuchMethod(
            Invocation.method(#keyFrame, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int currentKeyFrame() =>
      (super.noSuchMethod(
            Invocation.method(#currentKeyFrame, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int currentFrame() =>
      (super.noSuchMethod(
            Invocation.method(#currentFrame, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int currentFrameRate() =>
      (super.noSuchMethod(
            Invocation.method(#currentFrameRate, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);
}

/// A class which mocks [ByteWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockByteWorld extends _i1.Mock implements _i3.ByteWorld {
  @override
  _i6.Point<int> get viewSize =>
      (super.noSuchMethod(
            Invocation.getter(#viewSize),
            returnValue: _FakePoint_4<int>(this, Invocation.getter(#viewSize)),
            returnValueForMissingStub: _FakePoint_4<int>(
              this,
              Invocation.getter(#viewSize),
            ),
          )
          as _i6.Point<int>);

  @override
  set viewSize(_i6.Point<int>? _viewSize) => super.noSuchMethod(
    Invocation.setter(#viewSize, _viewSize),
    returnValueForMissingStub: null,
  );

  @override
  set canvas(dynamic _canvas) => super.noSuchMethod(
    Invocation.setter(#canvas, _canvas),
    returnValueForMissingStub: null,
  );

  @override
  int get width =>
      (super.noSuchMethod(
            Invocation.getter(#width),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get height =>
      (super.noSuchMethod(
            Invocation.getter(#height),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  void setWorldImage(dynamic image) => super.noSuchMethod(
    Invocation.method(#setWorldImage, [image]),
    returnValueForMissingStub: null,
  );

  @override
  bool initialized() =>
      (super.noSuchMethod(
            Invocation.method(#initialized, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<int> getImageData(_i7.Vec2? pos, _i7.Vec2? size) =>
      (super.noSuchMethod(
            Invocation.method(#getImageData, [pos, size]),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  List<int> getImageDataFor(int? x, dynamic y, dynamic w, dynamic h) =>
      (super.noSuchMethod(
            Invocation.method(#getImageDataFor, [x, y, w, h]),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  void drawAt(dynamic canvas, dynamic x, dynamic y) => super.noSuchMethod(
    Invocation.method(#drawAt, [canvas, x, y]),
    returnValueForMissingStub: null,
  );

  @override
  void drawAsMiniMap(
    dynamic canvas,
    dynamic x,
    dynamic y, [
    double? wScale = 0.1,
    double? hScale = 0.1,
  ]) => super.noSuchMethod(
    Invocation.method(#drawAsMiniMap, [canvas, x, y, wScale, hScale]),
    returnValueForMissingStub: null,
  );

  @override
  bool isCanvasCollide(int? x, int? y, [int? width = 1, int? height = 1]) =>
      (super.noSuchMethod(
            Invocation.method(#isCanvasCollide, [x, y, width, height]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  dynamic clearAtRect(int? x, int? y, int? width, int? height) =>
      super.noSuchMethod(
        Invocation.method(#clearAtRect, [x, y, width, height]),
        returnValueForMissingStub: null,
      );

  @override
  String asDataUrl() =>
      (super.noSuchMethod(
            Invocation.method(#asDataUrl, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#asDataUrl, []),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#asDataUrl, []),
            ),
          )
          as String);

  @override
  dynamic fillRectAt(_i7.Vec2? pos, _i7.Vec2? size, String? colorString) =>
      super.noSuchMethod(
        Invocation.method(#fillRectAt, [pos, size, colorString]),
        returnValueForMissingStub: null,
      );

  @override
  dynamic clearAt(_i7.Vec2? pos, double? radius) => super.noSuchMethod(
    Invocation.method(#clearAt, [pos, radius]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 randomNotSolidPoint(_i7.Vec2? sizeOffset) =>
      (super.noSuchMethod(
            Invocation.method(#randomNotSolidPoint, [sizeOffset]),
            returnValue: _FakeVec2_5(
              this,
              Invocation.method(#randomNotSolidPoint, [sizeOffset]),
            ),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.method(#randomNotSolidPoint, [sizeOffset]),
            ),
          )
          as _i7.Vec2);
}

/// A class which mocks [PeerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerWrapper extends _i1.Mock implements _i5.PeerWrapper {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i8.ServerChannel get serverChannel =>
      (super.noSuchMethod(
            Invocation.getter(#serverChannel),
            returnValue: _FakeServerChannel_6(
              this,
              Invocation.getter(#serverChannel),
            ),
            returnValueForMissingStub: _FakeServerChannel_6(
              this,
              Invocation.getter(#serverChannel),
            ),
          )
          as _i8.ServerChannel);

  @override
  set serverChannel(_i8.ServerChannel? _serverChannel) => super.noSuchMethod(
    Invocation.setter(#serverChannel, _serverChannel),
    returnValueForMissingStub: null,
  );

  @override
  set id(String? _id) => super.noSuchMethod(
    Invocation.setter(#id, _id),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, _i9.ConnectionWrapper> get connections =>
      (super.noSuchMethod(
            Invocation.getter(#connections),
            returnValue: <String, _i9.ConnectionWrapper>{},
            returnValueForMissingStub: <String, _i9.ConnectionWrapper>{},
          )
          as Map<String, _i9.ConnectionWrapper>);

  @override
  set connections(Map<String, _i9.ConnectionWrapper>? _connections) =>
      super.noSuchMethod(
        Invocation.setter(#connections, _connections),
        returnValueForMissingStub: null,
      );

  @override
  _i9.ConnectionWrapper connectTo(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#connectTo, [id]),
            returnValue: _FakeConnectionWrapper_7(
              this,
              Invocation.method(#connectTo, [id]),
            ),
            returnValueForMissingStub: _FakeConnectionWrapper_7(
              this,
              Invocation.method(#connectTo, [id]),
            ),
          )
          as _i9.ConnectionWrapper);

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );

  @override
  void reconnect() => super.noSuchMethod(
    Invocation.method(#reconnect, []),
    returnValueForMissingStub: null,
  );

  @override
  void error(dynamic unusedThis, dynamic e) => super.noSuchMethod(
    Invocation.method(#error, [unusedThis, e]),
    returnValueForMissingStub: null,
  );

  @override
  bool hasMaxAutoConnections() =>
      (super.noSuchMethod(
            Invocation.method(#hasMaxAutoConnections, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool autoConnectToPeers() =>
      (super.noSuchMethod(
            Invocation.method(#autoConnectToPeers, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasConnections() =>
      (super.noSuchMethod(
            Invocation.method(#hasConnections, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasConnectionTo(dynamic id) =>
      (super.noSuchMethod(
            Invocation.method(#hasConnectionTo, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasHadConnectionTo(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#hasHadConnectionTo, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void tickConnections(double? duration, List<int>? removals) =>
      super.noSuchMethod(
        Invocation.method(#tickConnections, [duration, removals]),
        returnValueForMissingStub: null,
      );

  @override
  void sendDataWithKeyFramesToAll(
    Map<dynamic, dynamic>? data, [
    String? dontSendTo,
    String? onlySendTo,
  ]) => super.noSuchMethod(
    Invocation.method(#sendDataWithKeyFramesToAll, [
      data,
      dontSendTo,
      onlySendTo,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void healthCheckConnection(String? id) => super.noSuchMethod(
    Invocation.method(#healthCheckConnection, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void removeClosedConnection(String? id) => super.noSuchMethod(
    Invocation.method(#removeClosedConnection, [id]),
    returnValueForMissingStub: null,
  );

  @override
  bool connectionsExhausted() =>
      (super.noSuchMethod(
            Invocation.method(#connectionsExhausted, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool noMoreConnectionsAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#noMoreConnectionsAvailable, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasReceivedActiveIds() =>
      (super.noSuchMethod(
            Invocation.method(#hasReceivedActiveIds, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool connectedToServer() =>
      (super.noSuchMethod(
            Invocation.method(#connectedToServer, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [FpsCounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockFpsCounter extends _i1.Mock implements _i4.FpsCounter {
  @override
  int get frames =>
      (super.noSuchMethod(
            Invocation.getter(#frames),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set frames(int? _frames) => super.noSuchMethod(
    Invocation.setter(#frames, _frames),
    returnValueForMissingStub: null,
  );

  @override
  bool timeWithFrames(double? time, int? framesPassed) =>
      (super.noSuchMethod(
            Invocation.method(#timeWithFrames, [time, framesPassed]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double fps() =>
      (super.noSuchMethod(
            Invocation.method(#fps, []),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  dynamic setFpsForTest(double? fps) => super.noSuchMethod(
    Invocation.method(#setFpsForTest, [fps]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WormWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockWormWorld extends _i1.Mock implements _i3.WormWorld {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i3.Loader get loader =>
      (super.noSuchMethod(
            Invocation.getter(#loader),
            returnValue: _FakeLoader_8(this, Invocation.getter(#loader)),
            returnValueForMissingStub: _FakeLoader_8(
              this,
              Invocation.getter(#loader),
            ),
          )
          as _i3.Loader);

  @override
  set loader(_i3.Loader? _loader) => super.noSuchMethod(
    Invocation.setter(#loader, _loader),
    returnValueForMissingStub: null,
  );

  @override
  _i10.SpriteIndex get spriteIndex =>
      (super.noSuchMethod(
            Invocation.getter(#spriteIndex),
            returnValue: _FakeSpriteIndex_9(
              this,
              Invocation.getter(#spriteIndex),
            ),
            returnValueForMissingStub: _FakeSpriteIndex_9(
              this,
              Invocation.getter(#spriteIndex),
            ),
          )
          as _i10.SpriteIndex);

  @override
  set spriteIndex(_i10.SpriteIndex? _spriteIndex) => super.noSuchMethod(
    Invocation.setter(#spriteIndex, _spriteIndex),
    returnValueForMissingStub: null,
  );

  @override
  _i4.KeyState get localKeyState =>
      (super.noSuchMethod(
            Invocation.getter(#localKeyState),
            returnValue: _FakeKeyState_10(
              this,
              Invocation.getter(#localKeyState),
            ),
            returnValueForMissingStub: _FakeKeyState_10(
              this,
              Invocation.getter(#localKeyState),
            ),
          )
          as _i4.KeyState);

  @override
  set localKeyState(_i4.KeyState? _localKeyState) => super.noSuchMethod(
    Invocation.setter(#localKeyState, _localKeyState),
    returnValueForMissingStub: null,
  );

  @override
  _i4.HudMessages get hudMessages =>
      (super.noSuchMethod(
            Invocation.getter(#hudMessages),
            returnValue: _FakeHudMessages_11(
              this,
              Invocation.getter(#hudMessages),
            ),
            returnValueForMissingStub: _FakeHudMessages_11(
              this,
              Invocation.getter(#hudMessages),
            ),
          )
          as _i4.HudMessages);

  @override
  set hudMessages(_i4.HudMessages? _hudMessages) => super.noSuchMethod(
    Invocation.setter(#hudMessages, _hudMessages),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get viewPoint =>
      (super.noSuchMethod(
            Invocation.getter(#viewPoint),
            returnValue: _FakeVec2_5(this, Invocation.getter(#viewPoint)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#viewPoint),
            ),
          )
          as _i7.Vec2);

  @override
  set viewPoint(_i7.Vec2? _viewPoint) => super.noSuchMethod(
    Invocation.setter(#viewPoint, _viewPoint),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get halfWorld =>
      (super.noSuchMethod(
            Invocation.getter(#halfWorld),
            returnValue: _FakeVec2_5(this, Invocation.getter(#halfWorld)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#halfWorld),
            ),
          )
          as _i7.Vec2);

  @override
  set halfWorld(_i7.Vec2? _halfWorld) => super.noSuchMethod(
    Invocation.setter(#halfWorld, _halfWorld),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ByteWorld get byteWorld =>
      (super.noSuchMethod(
            Invocation.getter(#byteWorld),
            returnValue: _FakeByteWorld_12(this, Invocation.getter(#byteWorld)),
            returnValueForMissingStub: _FakeByteWorld_12(
              this,
              Invocation.getter(#byteWorld),
            ),
          )
          as _i3.ByteWorld);

  @override
  set byteWorld(_i3.ByteWorld? _byteWorld) => super.noSuchMethod(
    Invocation.setter(#byteWorld, _byteWorld),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get gravity =>
      (super.noSuchMethod(
            Invocation.getter(#gravity),
            returnValue: _FakeVec2_5(this, Invocation.getter(#gravity)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#gravity),
            ),
          )
          as _i7.Vec2);

  @override
  set gravity(_i7.Vec2? _gravity) => super.noSuchMethod(
    Invocation.setter(#gravity, _gravity),
    returnValueForMissingStub: null,
  );

  @override
  double get explosionFlash =>
      (super.noSuchMethod(
            Invocation.getter(#explosionFlash),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set explosionFlash(double? _explosionFlash) => super.noSuchMethod(
    Invocation.setter(#explosionFlash, _explosionFlash),
    returnValueForMissingStub: null,
  );

  @override
  int get invalidKeysPressed =>
      (super.noSuchMethod(
            Invocation.getter(#invalidKeysPressed),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set invalidKeysPressed(int? _invalidKeysPressed) => super.noSuchMethod(
    Invocation.setter(#invalidKeysPressed, _invalidKeysPressed),
    returnValueForMissingStub: null,
  );

  @override
  set playerSprite(_i10.LocalPlayerSprite? _playerSprite) => super.noSuchMethod(
    Invocation.setter(#playerSprite, _playerSprite),
    returnValueForMissingStub: null,
  );

  @override
  int get spriteNetworkId =>
      (super.noSuchMethod(
            Invocation.getter(#spriteNetworkId),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set spriteNetworkId(int? _spriteNetworkId) => super.noSuchMethod(
    Invocation.setter(#spriteNetworkId, _spriteNetworkId),
    returnValueForMissingStub: null,
  );

  @override
  bool get restart =>
      (super.noSuchMethod(
            Invocation.getter(#restart),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set restart(bool? _restart) => super.noSuchMethod(
    Invocation.setter(#restart, _restart),
    returnValueForMissingStub: null,
  );

  @override
  bool get freeze =>
      (super.noSuchMethod(
            Invocation.getter(#freeze),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set freeze(bool? _freeze) => super.noSuchMethod(
    Invocation.setter(#freeze, _freeze),
    returnValueForMissingStub: null,
  );

  @override
  double get controlHelperTime =>
      (super.noSuchMethod(
            Invocation.getter(#controlHelperTime),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set controlHelperTime(double? _controlHelperTime) => super.noSuchMethod(
    Invocation.setter(#controlHelperTime, _controlHelperTime),
    returnValueForMissingStub: null,
  );

  @override
  void collisionCheck(int? networkId, dynamic duration) => super.noSuchMethod(
    Invocation.method(#collisionCheck, [networkId, duration]),
    returnValueForMissingStub: null,
  );

  @override
  void connectTo(dynamic id, [String? name = null, bool? startGame = true]) =>
      super.noSuchMethod(
        Invocation.method(#connectTo, [id, name, startGame]),
        returnValueForMissingStub: null,
      );

  @override
  void displayHudMessageAndSendToNetwork(String? message, [double? period]) =>
      super.noSuchMethod(
        Invocation.method(#displayHudMessageAndSendToNetwork, [
          message,
          period,
        ]),
        returnValueForMissingStub: null,
      );

  @override
  bool loaderCompleted() =>
      (super.noSuchMethod(
            Invocation.method(#loaderCompleted, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void frameDraw([double? duration = 0.01, bool? slowDown = false]) =>
      super.noSuchMethod(
        Invocation.method(#frameDraw, [duration, slowDown]),
        returnValueForMissingStub: null,
      );

  @override
  void checkWinner(_i4.PlayerInfo? info) => super.noSuchMethod(
    Invocation.method(#checkWinner, [info]),
    returnValueForMissingStub: null,
  );

  @override
  bool shouldDraw(_i10.Sprite? sprite) =>
      (super.noSuchMethod(
            Invocation.method(#shouldDraw, [sprite]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void createLocalClient(int? spriteId, _i7.Vec2? position) =>
      super.noSuchMethod(
        Invocation.method(#createLocalClient, [spriteId, position]),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addLocalPlayerSprite(String? name) => super.noSuchMethod(
    Invocation.method(#addLocalPlayerSprite, [name]),
    returnValueForMissingStub: null,
  );

  @override
  void adjustPlayerSprite(
    _i10.LocalPlayerSprite? playerSprite,
    int? playerSpriteId,
  ) => super.noSuchMethod(
    Invocation.method(#adjustPlayerSprite, [playerSprite, playerSpriteId]),
    returnValueForMissingStub: null,
  );

  @override
  void addParticlesFromNetworkData(List<int>? data) => super.noSuchMethod(
    Invocation.method(#addParticlesFromNetworkData, [data]),
    returnValueForMissingStub: null,
  );

  @override
  void explosionAt({
    required _i7.Vec2? location,
    _i7.Vec2? velocity,
    bool? addParticles = false,
    required int? damage,
    required double? radius,
    _i10.LocalPlayerSprite? damagerDoer,
    bool? fromNetwork = false,
    _i10.Mod? mod = _i10.Mod.UNKNOWN,
  }) => super.noSuchMethod(
    Invocation.method(#explosionAt, [], {
      #location: location,
      #velocity: velocity,
      #addParticles: addParticles,
      #damage: damage,
      #radius: radius,
      #damagerDoer: damagerDoer,
      #fromNetwork: fromNetwork,
      #mod: mod,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void fillRectAt(
    _i7.Vec2? pos,
    _i7.Vec2? size,
    String? colorString, [
    bool? fromNetwork = false,
  ]) => super.noSuchMethod(
    Invocation.method(#fillRectAt, [pos, size, colorString, fromNetwork]),
    returnValueForMissingStub: null,
  );

  @override
  int advanceFrames(double? duration) =>
      (super.noSuchMethod(
            Invocation.method(#advanceFrames, [duration]),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  void explosionAtSprite({
    required _i10.Sprite? sprite,
    required _i7.Vec2? velocity,
    bool? addpParticles = false,
    required int? damage,
    required double? radius,
    required _i10.LocalPlayerSprite? damageDoer,
    bool? fromNetwork = false,
    _i10.Mod? mod = _i10.Mod.UNKNOWN,
  }) => super.noSuchMethod(
    Invocation.method(#explosionAtSprite, [], {
      #sprite: sprite,
      #velocity: velocity,
      #addpParticles: addpParticles,
      #damage: damage,
      #radius: radius,
      #damageDoer: damageDoer,
      #fromNetwork: fromNetwork,
      #mod: mod,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void clearWorldArea(_i7.Vec2? location, double? radius) => super.noSuchMethod(
    Invocation.method(#clearWorldArea, [location, radius]),
    returnValueForMissingStub: null,
  );

  @override
  void connectToAllPeersInGameState() => super.noSuchMethod(
    Invocation.method(#connectToAllPeersInGameState, []),
    returnValueForMissingStub: null,
  );

  @override
  dynamic clearFromNetworkUpdate(List<int>? data) => super.noSuchMethod(
    Invocation.method(#clearFromNetworkUpdate, [data]),
    returnValueForMissingStub: null,
  );

  @override
  List<int> destructionAsNetworkUpdate(
    _i7.Vec2? pos,
    _i7.Vec2? velocity,
    double? radius,
    int? damage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#destructionAsNetworkUpdate, [
              pos,
              velocity,
              radius,
              damage,
            ]),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  dynamic drawFromNetworkUpdate(List<dynamic>? data) => super.noSuchMethod(
    Invocation.method(#drawFromNetworkUpdate, [data]),
    returnValueForMissingStub: null,
  );

  @override
  List<dynamic> drawAsNetworkUpdate(
    _i7.Vec2? pos,
    _i7.Vec2? size,
    String? colorString,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#drawAsNetworkUpdate, [pos, size, colorString]),
            returnValue: <dynamic>[],
            returnValueForMissingStub: <dynamic>[],
          )
          as List<dynamic>);

  @override
  void addVelocityFromExplosion(
    _i7.Vec2? location,
    int? damage,
    double? radius,
    bool? doDamage,
    _i10.LocalPlayerSprite? damageDoer,
    _i10.Mod? mod,
  ) => super.noSuchMethod(
    Invocation.method(#addVelocityFromExplosion, [
      location,
      damage,
      radius,
      doDamage,
      damageDoer,
      mod,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void initByteWorld([String? map = 'world_town.png']) => super.noSuchMethod(
    Invocation.method(#initByteWorld, [map]),
    returnValueForMissingStub: null,
  );

  @override
  void addSprite(_i10.Sprite? sprite) => super.noSuchMethod(
    Invocation.method(#addSprite, [sprite]),
    returnValueForMissingStub: null,
  );

  @override
  void removeSprite(int? networkId) => super.noSuchMethod(
    Invocation.method(#removeSprite, [networkId]),
    returnValueForMissingStub: null,
  );

  @override
  void replaceSprite(int? id, _i10.Sprite? sprite) => super.noSuchMethod(
    Invocation.method(#replaceSprite, [id, sprite]),
    returnValueForMissingStub: null,
  );

  @override
  void clearScreen() => super.noSuchMethod(
    Invocation.method(#clearScreen, []),
    returnValueForMissingStub: null,
  );

  @override
  void drawFpsCounters() => super.noSuchMethod(
    Invocation.method(#drawFpsCounters, []),
    returnValueForMissingStub: null,
  );

  @override
  num width() =>
      (super.noSuchMethod(
            Invocation.method(#width, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as num);

  @override
  num height() =>
      (super.noSuchMethod(
            Invocation.method(#height, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as num);

  @override
  _i11.Network network() =>
      (super.noSuchMethod(
            Invocation.method(#network, []),
            returnValue: _FakeNetwork_13(this, Invocation.method(#network, [])),
            returnValueForMissingStub: _FakeNetwork_13(
              this,
              Invocation.method(#network, []),
            ),
          )
          as _i11.Network);

  @override
  _i12.ImageIndex imageIndex() =>
      (super.noSuchMethod(
            Invocation.method(#imageIndex, []),
            returnValue: _FakeImageIndex_14(
              this,
              Invocation.method(#imageIndex, []),
            ),
            returnValueForMissingStub: _FakeImageIndex_14(
              this,
              Invocation.method(#imageIndex, []),
            ),
          )
          as _i12.ImageIndex);

  @override
  _i4.FpsCounter drawFps() =>
      (super.noSuchMethod(
            Invocation.method(#drawFps, []),
            returnValue: _FakeFpsCounter_15(
              this,
              Invocation.method(#drawFps, []),
            ),
            returnValueForMissingStub: _FakeFpsCounter_15(
              this,
              Invocation.method(#drawFps, []),
            ),
          )
          as _i4.FpsCounter);

  @override
  bool isCommander() =>
      (super.noSuchMethod(
            Invocation.method(#isCommander, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [ConnectionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionFactory extends _i1.Mock implements _i8.ConnectionFactory {
  @override
  dynamic connectTo(dynamic wrapper, String? ourPeerId, String? otherPeerId) =>
      super.noSuchMethod(
        Invocation.method(#connectTo, [wrapper, ourPeerId, otherPeerId]),
        returnValueForMissingStub: null,
      );

  @override
  dynamic createInboundConnection(
    dynamic wrapper,
    dynamic sdp,
    String? otherPeerId,
    String? ourPeerId,
  ) => super.noSuchMethod(
    Invocation.method(#createInboundConnection, [
      wrapper,
      sdp,
      otherPeerId,
      ourPeerId,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  dynamic handleCreateAnswer(dynamic connection, String? src, String? dst) =>
      super.noSuchMethod(
        Invocation.method(#handleCreateAnswer, [connection, src, dst]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConnectionWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionWrapper extends _i1.Mock implements _i9.ConnectionWrapper {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i14.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  bool get closed =>
      (super.noSuchMethod(
            Invocation.getter(#closed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set closed(bool? _closed) => super.noSuchMethod(
    Invocation.setter(#closed, _closed),
    returnValueForMissingStub: null,
  );

  @override
  int get lastRemoteKeyFrame =>
      (super.noSuchMethod(
            Invocation.getter(#lastRemoteKeyFrame),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set lastRemoteKeyFrame(int? _lastRemoteKeyFrame) => super.noSuchMethod(
    Invocation.setter(#lastRemoteKeyFrame, _lastRemoteKeyFrame),
    returnValueForMissingStub: null,
  );

  @override
  int get lastDeliveredKeyFrame =>
      (super.noSuchMethod(
            Invocation.getter(#lastDeliveredKeyFrame),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set lastDeliveredKeyFrame(int? _lastDeliveredKeyFrame) => super.noSuchMethod(
    Invocation.setter(#lastDeliveredKeyFrame, _lastDeliveredKeyFrame),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Random get r =>
      (super.noSuchMethod(
            Invocation.getter(#r),
            returnValue: _FakeRandom_16(this, Invocation.getter(#r)),
            returnValueForMissingStub: _FakeRandom_16(
              this,
              Invocation.getter(#r),
            ),
          )
          as _i6.Random);

  @override
  set r(_i6.Random? _r) => super.noSuchMethod(
    Invocation.setter(#r, _r),
    returnValueForMissingStub: null,
  );

  @override
  int currentKeyFrame() =>
      (super.noSuchMethod(
            Invocation.method(#currentKeyFrame, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool hasReceivedFirstKeyFrame(Map<dynamic, dynamic>? dataMap) =>
      (super.noSuchMethod(
            Invocation.method(#hasReceivedFirstKeyFrame, [dataMap]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void close(String? reason) => super.noSuchMethod(
    Invocation.method(#close, [reason]),
    returnValueForMissingStub: null,
  );

  @override
  void open() => super.noSuchMethod(
    Invocation.method(#open, []),
    returnValueForMissingStub: null,
  );

  @override
  void connectToGame(String? playerName, int? playerSpriteId) =>
      super.noSuchMethod(
        Invocation.method(#connectToGame, [playerName, playerSpriteId]),
        returnValueForMissingStub: null,
      );

  @override
  void sendClientEnter() => super.noSuchMethod(
    Invocation.method(#sendClientEnter, []),
    returnValueForMissingStub: null,
  );

  @override
  void sendCommandTransfer() => super.noSuchMethod(
    Invocation.method(#sendCommandTransfer, []),
    returnValueForMissingStub: null,
  );

  @override
  void sendPing([bool? gameStatePing = false]) => super.noSuchMethod(
    Invocation.method(#sendPing, [gameStatePing]),
    returnValueForMissingStub: null,
  );

  @override
  bool lastReceiveActivityOlderThan(int? millis) =>
      (super.noSuchMethod(
            Invocation.method(#lastReceiveActivityOlderThan, [millis]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool lastSendActivityOlderThan(int? millis) =>
      (super.noSuchMethod(
            Invocation.method(#lastSendActivityOlderThan, [millis]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool initialPongReceived() =>
      (super.noSuchMethod(
            Invocation.method(#initialPongReceived, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool initialPingSent() =>
      (super.noSuchMethod(
            Invocation.method(#initialPingSent, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void setHandshakeReceived() => super.noSuchMethod(
    Invocation.method(#setHandshakeReceived, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetHandshakeReceived() => super.noSuchMethod(
    Invocation.method(#resetHandshakeReceived, []),
    returnValueForMissingStub: null,
  );

  @override
  void markAsClientToClientConnection() => super.noSuchMethod(
    Invocation.method(#markAsClientToClientConnection, []),
    returnValueForMissingStub: null,
  );

  @override
  void error(dynamic error) => super.noSuchMethod(
    Invocation.method(#error, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void receiveData(dynamic data) => super.noSuchMethod(
    Invocation.method(#receiveData, [data]),
    returnValueForMissingStub: null,
  );

  @override
  void checkIfShouldClose(int? keyFrame) => super.noSuchMethod(
    Invocation.method(#checkIfShouldClose, [keyFrame]),
    returnValueForMissingStub: null,
  );

  @override
  void tick(
    double? duration,
    Map<dynamic, dynamic>? frameData,
    Map<dynamic, dynamic>? keyFrameData,
    List<int>? removals,
  ) => super.noSuchMethod(
    Invocation.method(#tick, [duration, frameData, keyFrameData, removals]),
    returnValueForMissingStub: null,
  );

  @override
  void sendData(Map<dynamic, dynamic>? data) => super.noSuchMethod(
    Invocation.method(#sendData, [data]),
    returnValueForMissingStub: null,
  );

  @override
  void readyDataChannel(dynamic dataChannel) => super.noSuchMethod(
    Invocation.method(#readyDataChannel, [dataChannel]),
    returnValueForMissingStub: null,
  );

  @override
  bool hasReadyDataChannel() =>
      (super.noSuchMethod(
            Invocation.method(#hasReadyDataChannel, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void setRtcConnection(dynamic rtcConnection) => super.noSuchMethod(
    Invocation.method(#setRtcConnection, [rtcConnection]),
    returnValueForMissingStub: null,
  );

  @override
  int keyFramesBehind() =>
      (super.noSuchMethod(
            Invocation.method(#keyFramesBehind, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool isActiveConnection() =>
      (super.noSuchMethod(
            Invocation.method(#isActiveConnection, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool wasOpen() =>
      (super.noSuchMethod(
            Invocation.method(#wasOpen, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isClosedConnection() =>
      (super.noSuchMethod(
            Invocation.method(#isClosedConnection, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isValidGameConnection() =>
      (super.noSuchMethod(
            Invocation.method(#isValidGameConnection, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void sampleLatency(Duration? latency) => super.noSuchMethod(
    Invocation.method(#sampleLatency, [latency]),
    returnValueForMissingStub: null,
  );

  @override
  Duration expectedLatency() =>
      (super.noSuchMethod(
            Invocation.method(#expectedLatency, []),
            returnValue: _FakeDuration_17(
              this,
              Invocation.method(#expectedLatency, []),
            ),
            returnValueForMissingStub: _FakeDuration_17(
              this,
              Invocation.method(#expectedLatency, []),
            ),
          )
          as Duration);

  @override
  _i13.ReliableHelper reliableHelper() =>
      (super.noSuchMethod(
            Invocation.method(#reliableHelper, []),
            returnValue: _FakeReliableHelper_18(
              this,
              Invocation.method(#reliableHelper, []),
            ),
            returnValueForMissingStub: _FakeReliableHelper_18(
              this,
              Invocation.method(#reliableHelper, []),
            ),
          )
          as _i13.ReliableHelper);

  @override
  int currentFrameRate() =>
      (super.noSuchMethod(
            Invocation.method(#currentFrameRate, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String stats() =>
      (super.noSuchMethod(
            Invocation.method(#stats, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#stats, []),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#stats, []),
            ),
          )
          as String);
}

/// A class which mocks [KeyState].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyState extends _i1.Mock implements _i4.KeyState {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i3.WormWorld get world =>
      (super.noSuchMethod(
            Invocation.getter(#world),
            returnValue: _FakeWormWorld_1(this, Invocation.getter(#world)),
            returnValueForMissingStub: _FakeWormWorld_1(
              this,
              Invocation.getter(#world),
            ),
          )
          as _i3.WormWorld);

  @override
  set world(_i3.WormWorld? _world) => super.noSuchMethod(
    Invocation.setter(#world, _world),
    returnValueForMissingStub: null,
  );

  @override
  bool get debug =>
      (super.noSuchMethod(
            Invocation.getter(#debug),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set debug(bool? _debug) => super.noSuchMethod(
    Invocation.setter(#debug, _debug),
    returnValueForMissingStub: null,
  );

  @override
  bool get remoteState =>
      (super.noSuchMethod(
            Invocation.getter(#remoteState),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set remoteState(bool? _remoteState) => super.noSuchMethod(
    Invocation.setter(#remoteState, _remoteState),
    returnValueForMissingStub: null,
  );

  @override
  Map<int, double> get keysDown =>
      (super.noSuchMethod(
            Invocation.getter(#keysDown),
            returnValue: <int, double>{},
            returnValueForMissingStub: <int, double>{},
          )
          as Map<int, double>);

  @override
  set keysDown(Map<int, double>? _keysDown) => super.noSuchMethod(
    Invocation.setter(#keysDown, _keysDown),
    returnValueForMissingStub: null,
  );

  @override
  void onKeyDown(int? keyCode, [double? strength = 0.999]) =>
      super.noSuchMethod(
        Invocation.method(#onKeyDown, [keyCode, strength]),
        returnValueForMissingStub: null,
      );

  @override
  void onKeyUp(int? keyCode) => super.noSuchMethod(
    Invocation.method(#onKeyUp, [keyCode]),
    returnValueForMissingStub: null,
  );

  @override
  bool keyIsDown(num? key, [double? strength = 0.999]) =>
      (super.noSuchMethod(
            Invocation.method(#keyIsDown, [key, strength]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double? keyIsDownStrength(num? key) =>
      (super.noSuchMethod(
            Invocation.method(#keyIsDownStrength, [key]),
            returnValueForMissingStub: null,
          )
          as double?);

  @override
  void setEnabledKeys(Map<String, bool>? keysDown) => super.noSuchMethod(
    Invocation.method(#setEnabledKeys, [keysDown]),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, bool> getEnabledState() =>
      (super.noSuchMethod(
            Invocation.method(#getEnabledState, []),
            returnValue: <String, bool>{},
            returnValueForMissingStub: <String, bool>{},
          )
          as Map<String, bool>);

  @override
  dynamic registerListener(int? key, dynamic f) => super.noSuchMethod(
    Invocation.method(#registerListener, [key, f]),
    returnValueForMissingStub: null,
  );

  @override
  Duration lastUserInput() =>
      (super.noSuchMethod(
            Invocation.method(#lastUserInput, []),
            returnValue: _FakeDuration_17(
              this,
              Invocation.method(#lastUserInput, []),
            ),
            returnValueForMissingStub: _FakeDuration_17(
              this,
              Invocation.method(#lastUserInput, []),
            ),
          )
          as Duration);
}

/// A class which mocks [GameState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameState extends _i1.Mock implements _i4.GameState {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  DateTime get startedAt =>
      (super.noSuchMethod(
            Invocation.getter(#startedAt),
            returnValue: _FakeDateTime_19(this, Invocation.getter(#startedAt)),
            returnValueForMissingStub: _FakeDateTime_19(
              this,
              Invocation.getter(#startedAt),
            ),
          )
          as DateTime);

  @override
  set startedAt(DateTime? _startedAt) => super.noSuchMethod(
    Invocation.setter(#startedAt, _startedAt),
    returnValueForMissingStub: null,
  );

  @override
  set mapName(String? _mapName) => super.noSuchMethod(
    Invocation.setter(#mapName, _mapName),
    returnValueForMissingStub: null,
  );

  @override
  set actingCommanderId(String? _actingCommanderId) => super.noSuchMethod(
    Invocation.setter(#actingCommanderId, _actingCommanderId),
    returnValueForMissingStub: null,
  );

  @override
  set winnerPlayerId(String? _winnerPlayerId) => super.noSuchMethod(
    Invocation.setter(#winnerPlayerId, _winnerPlayerId),
    returnValueForMissingStub: null,
  );

  @override
  bool retrieveAndResetUrgentData() =>
      (super.noSuchMethod(
            Invocation.method(#retrieveAndResetUrgentData, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void markAsUrgent() => super.noSuchMethod(
    Invocation.method(#markAsUrgent, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isConnected(String? a, String? b) =>
      (super.noSuchMethod(
            Invocation.method(#isConnected, [a, b]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isInGame(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#isInGame, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasWinner() =>
      (super.noSuchMethod(
            Invocation.method(#hasWinner, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasCommander() =>
      (super.noSuchMethod(
            Invocation.method(#hasCommander, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isAtMaxPlayers() =>
      (super.noSuchMethod(
            Invocation.method(#isAtMaxPlayers, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i4.PlayerInfo> playerInfoList() =>
      (super.noSuchMethod(
            Invocation.method(#playerInfoList, []),
            returnValue: <_i4.PlayerInfo>[],
            returnValueForMissingStub: <_i4.PlayerInfo>[],
          )
          as List<_i4.PlayerInfo>);

  @override
  void addPlayerInfo(_i4.PlayerInfo? info) => super.noSuchMethod(
    Invocation.method(#addPlayerInfo, [info]),
    returnValueForMissingStub: null,
  );

  @override
  dynamic updateFromMap(Map<dynamic, dynamic>? map) => super.noSuchMethod(
    Invocation.method(#updateFromMap, [map]),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <dynamic, dynamic>{},
            returnValueForMissingStub: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i4.PlayerInfo? removeByConnectionId(_i3.WormWorld? world, String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeByConnectionId, [world, id]),
            returnValueForMissingStub: null,
          )
          as _i4.PlayerInfo?);

  @override
  dynamic convertToServer(_i3.WormWorld? world, dynamic selfConnectionId) =>
      super.noSuchMethod(
        Invocation.method(#convertToServer, [world, selfConnectionId]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.PlayerInfo? playerInfoByConnectionId(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#playerInfoByConnectionId, [id]),
            returnValueForMissingStub: null,
          )
          as _i4.PlayerInfo?);

  @override
  _i4.PlayerInfo playerInfoBySpriteId(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#playerInfoBySpriteId, [id]),
            returnValue: _FakePlayerInfo_20(
              this,
              Invocation.method(#playerInfoBySpriteId, [id]),
            ),
            returnValueForMissingStub: _FakePlayerInfo_20(
              this,
              Invocation.method(#playerInfoBySpriteId, [id]),
            ),
          )
          as _i4.PlayerInfo);

  @override
  int getNextUsablePlayerSpriteId(_i3.WormWorld? world) =>
      (super.noSuchMethod(
            Invocation.method(#getNextUsablePlayerSpriteId, [world]),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);
}

/// A class which mocks [SpriteIndex].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpriteIndex extends _i1.Mock implements _i10.SpriteIndex {
  @override
  int get spriteNetworkId =>
      (super.noSuchMethod(
            Invocation.getter(#spriteNetworkId),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set spriteNetworkId(int? _spriteNetworkId) => super.noSuchMethod(
    Invocation.setter(#spriteNetworkId, _spriteNetworkId),
    returnValueForMissingStub: null,
  );

  @override
  _i10.MovingSprite CreateSpriteFromNetwork(
    _i3.WormWorld? world,
    int? networkId,
    _i10.SpriteConstructor? constructor,
    _i9.ConnectionWrapper? wrapper,
    List<dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#CreateSpriteFromNetwork, [
              world,
              networkId,
              constructor,
              wrapper,
              data,
            ]),
            returnValue: _FakeMovingSprite_21(
              this,
              Invocation.method(#CreateSpriteFromNetwork, [
                world,
                networkId,
                constructor,
                wrapper,
                data,
              ]),
            ),
            returnValueForMissingStub: _FakeMovingSprite_21(
              this,
              Invocation.method(#CreateSpriteFromNetwork, [
                world,
                networkId,
                constructor,
                wrapper,
                data,
              ]),
            ),
          )
          as _i10.MovingSprite);

  @override
  void addSprite(_i10.Sprite? sprite) => super.noSuchMethod(
    Invocation.method(#addSprite, [sprite]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i10.Sprite> putPendingSpritesInWorld() =>
      (super.noSuchMethod(
            Invocation.method(#putPendingSpritesInWorld, []),
            returnValue: <_i10.Sprite>[],
            returnValueForMissingStub: <_i10.Sprite>[],
          )
          as List<_i10.Sprite>);

  @override
  void replaceSprite(int? id, _i10.Sprite? sprite) => super.noSuchMethod(
    Invocation.method(#replaceSprite, [id, sprite]),
    returnValueForMissingStub: null,
  );

  @override
  void removeSprite(int? id) => super.noSuchMethod(
    Invocation.method(#removeSprite, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void removePending() => super.noSuchMethod(
    Invocation.method(#removePending, []),
    returnValueForMissingStub: null,
  );

  @override
  Iterable<int> spriteIds() =>
      (super.noSuchMethod(
            Invocation.method(#spriteIds, []),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as Iterable<int>);

  @override
  List<int> getAndClearNetworkRemovals() =>
      (super.noSuchMethod(
            Invocation.method(#getAndClearNetworkRemovals, []),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );

  @override
  int count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  void operator []=(int? i, _i10.Sprite? value) => super.noSuchMethod(
    Invocation.method(#[]=, [i, value]),
    returnValueForMissingStub: null,
  );

  @override
  bool hasSprite(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#hasSprite, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [ChunkHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockChunkHelper extends _i1.Mock implements _i11.ChunkHelper {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i11.DataCounter get counter =>
      (super.noSuchMethod(
            Invocation.getter(#counter),
            returnValue: _FakeDataCounter_22(this, Invocation.getter(#counter)),
            returnValueForMissingStub: _FakeDataCounter_22(
              this,
              Invocation.getter(#counter),
            ),
          )
          as _i11.DataCounter);

  @override
  set counter(_i11.DataCounter? _counter) => super.noSuchMethod(
    Invocation.setter(#counter, _counter),
    returnValueForMissingStub: null,
  );

  @override
  void replyWithImageData(
    Map<dynamic, dynamic>? imageDataRequest,
    dynamic connection,
  ) => super.noSuchMethod(
    Invocation.method(#replyWithImageData, [imageDataRequest, connection]),
    returnValueForMissingStub: null,
  );

  @override
  void parseImageChunkResponse(
    Map<dynamic, dynamic>? imageDataResponse,
    dynamic connection,
  ) => super.noSuchMethod(
    Invocation.method(#parseImageChunkResponse, [
      imageDataResponse,
      connection,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void requestNetworkData(
    Map<String, _i9.ConnectionWrapper>? connections,
    double? secondsDuration,
  ) => super.noSuchMethod(
    Invocation.method(#requestNetworkData, [connections, secondsDuration]),
    returnValueForMissingStub: null,
  );

  @override
  void requestSpecificNetworkData(
    Map<String, _i9.ConnectionWrapper>? connections,
    double? secondsDuration,
    Iterable<int>? IdsToFetch,
  ) => super.noSuchMethod(
    Invocation.method(#requestSpecificNetworkData, [
      connections,
      secondsDuration,
      IdsToFetch,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> buildImageChunkRequest(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#buildImageChunkRequest, [index]),
            returnValue: <dynamic, dynamic>{},
            returnValueForMissingStub: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  double getCompleteRatio(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#getCompleteRatio, [index]),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  String getTransferSpeed() =>
      (super.noSuchMethod(
            Invocation.method(#getTransferSpeed, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#getTransferSpeed, []),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#getTransferSpeed, []),
            ),
          )
          as String);

  @override
  _i15.Stream<int> bytesPerSecondSamples() =>
      (super.noSuchMethod(
            Invocation.method(#bytesPerSecondSamples, []),
            returnValue: _i15.Stream<int>.empty(),
            returnValueForMissingStub: _i15.Stream<int>.empty(),
          )
          as _i15.Stream<int>);

  @override
  Map<String, int> failuresByConnection() =>
      (super.noSuchMethod(
            Invocation.method(#failuresByConnection, []),
            returnValue: <String, int>{},
            returnValueForMissingStub: <String, int>{},
          )
          as Map<String, int>);

  @override
  void setChunkSizeForTest(int? chunkSize) => super.noSuchMethod(
    Invocation.method(#setChunkSizeForTest, [chunkSize]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocalPlayerSprite].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPlayerSprite extends _i1.Mock implements _i10.LocalPlayerSprite {
  @override
  _i2.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_0(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_0(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i2.Logger);

  @override
  _i3.WormWorld get world =>
      (super.noSuchMethod(
            Invocation.getter(#world),
            returnValue: _FakeWormWorld_1(this, Invocation.getter(#world)),
            returnValueForMissingStub: _FakeWormWorld_1(
              this,
              Invocation.getter(#world),
            ),
          )
          as _i3.WormWorld);

  @override
  set world(_i3.WormWorld? _world) => super.noSuchMethod(
    Invocation.setter(#world, _world),
    returnValueForMissingStub: null,
  );

  @override
  int get health =>
      (super.noSuchMethod(
            Invocation.getter(#health),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set health(int? _health) => super.noSuchMethod(
    Invocation.setter(#health, _health),
    returnValueForMissingStub: null,
  );

  @override
  _i4.PlayerInfo get info =>
      (super.noSuchMethod(
            Invocation.getter(#info),
            returnValue: _FakePlayerInfo_20(this, Invocation.getter(#info)),
            returnValueForMissingStub: _FakePlayerInfo_20(
              this,
              Invocation.getter(#info),
            ),
          )
          as _i4.PlayerInfo);

  @override
  set info(_i4.PlayerInfo? _info) => super.noSuchMethod(
    Invocation.setter(#info, _info),
    returnValueForMissingStub: null,
  );

  @override
  set rope(_i10.Rope? _rope) => super.noSuchMethod(
    Invocation.setter(#rope, _rope),
    returnValueForMissingStub: null,
  );

  @override
  set weaponState(_i16.WeaponState? _weaponState) => super.noSuchMethod(
    Invocation.setter(#weaponState, _weaponState),
    returnValueForMissingStub: null,
  );

  @override
  bool get onGround =>
      (super.noSuchMethod(
            Invocation.getter(#onGround),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set onGround(bool? _onGround) => super.noSuchMethod(
    Invocation.setter(#onGround, _onGround),
    returnValueForMissingStub: null,
  );

  @override
  double get spawnIn =>
      (super.noSuchMethod(
            Invocation.getter(#spawnIn),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set spawnIn(double? _spawnIn) => super.noSuchMethod(
    Invocation.setter(#spawnIn, _spawnIn),
    returnValueForMissingStub: null,
  );

  @override
  _i10.MovingSprite get gun =>
      (super.noSuchMethod(
            Invocation.getter(#gun),
            returnValue: _FakeMovingSprite_21(this, Invocation.getter(#gun)),
            returnValueForMissingStub: _FakeMovingSprite_21(
              this,
              Invocation.getter(#gun),
            ),
          )
          as _i10.MovingSprite);

  @override
  set gun(_i10.MovingSprite? _gun) => super.noSuchMethod(
    Invocation.setter(#gun, _gun),
    returnValueForMissingStub: null,
  );

  @override
  int get shieldPoints =>
      (super.noSuchMethod(
            Invocation.getter(#shieldPoints),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set shieldPoints(int? shieldPoints) => super.noSuchMethod(
    Invocation.setter(#shieldPoints, shieldPoints),
    returnValueForMissingStub: null,
  );

  @override
  set jetPackSec(double? secs) => super.noSuchMethod(
    Invocation.setter(#jetPackSec, secs),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get velocity =>
      (super.noSuchMethod(
            Invocation.getter(#velocity),
            returnValue: _FakeVec2_5(this, Invocation.getter(#velocity)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#velocity),
            ),
          )
          as _i7.Vec2);

  @override
  set velocity(_i7.Vec2? _velocity) => super.noSuchMethod(
    Invocation.setter(#velocity, _velocity),
    returnValueForMissingStub: null,
  );

  @override
  double get rotationVelocity =>
      (super.noSuchMethod(
            Invocation.getter(#rotationVelocity),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set rotationVelocity(double? _rotationVelocity) => super.noSuchMethod(
    Invocation.setter(#rotationVelocity, _rotationVelocity),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get acceleration =>
      (super.noSuchMethod(
            Invocation.getter(#acceleration),
            returnValue: _FakeVec2_5(this, Invocation.getter(#acceleration)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#acceleration),
            ),
          )
          as _i7.Vec2);

  @override
  set acceleration(_i7.Vec2? _acceleration) => super.noSuchMethod(
    Invocation.setter(#acceleration, _acceleration),
    returnValueForMissingStub: null,
  );

  @override
  double get gravityAffect =>
      (super.noSuchMethod(
            Invocation.getter(#gravityAffect),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set gravityAffect(double? _gravityAffect) => super.noSuchMethod(
    Invocation.setter(#gravityAffect, _gravityAffect),
    returnValueForMissingStub: null,
  );

  @override
  bool get collision =>
      (super.noSuchMethod(
            Invocation.getter(#collision),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set collision(bool? _collision) => super.noSuchMethod(
    Invocation.setter(#collision, _collision),
    returnValueForMissingStub: null,
  );

  @override
  int get outOfBoundsMovesRemaining =>
      (super.noSuchMethod(
            Invocation.getter(#outOfBoundsMovesRemaining),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set outOfBoundsMovesRemaining(int? _outOfBoundsMovesRemaining) =>
      super.noSuchMethod(
        Invocation.setter(
          #outOfBoundsMovesRemaining,
          _outOfBoundsMovesRemaining,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get flags =>
      (super.noSuchMethod(
            Invocation.getter(#flags),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set flags(int? _flags) => super.noSuchMethod(
    Invocation.setter(#flags, _flags),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get position =>
      (super.noSuchMethod(
            Invocation.getter(#position),
            returnValue: _FakeVec2_5(this, Invocation.getter(#position)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#position),
            ),
          )
          as _i7.Vec2);

  @override
  set position(_i7.Vec2? _position) => super.noSuchMethod(
    Invocation.setter(#position, _position),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 get size =>
      (super.noSuchMethod(
            Invocation.getter(#size),
            returnValue: _FakeVec2_5(this, Invocation.getter(#size)),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.getter(#size),
            ),
          )
          as _i7.Vec2);

  @override
  set size(_i7.Vec2? _size) => super.noSuchMethod(
    Invocation.setter(#size, _size),
    returnValueForMissingStub: null,
  );

  @override
  int get imageId =>
      (super.noSuchMethod(
            Invocation.getter(#imageId),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set imageId(int? _imageId) => super.noSuchMethod(
    Invocation.setter(#imageId, _imageId),
    returnValueForMissingStub: null,
  );

  @override
  double get angle =>
      (super.noSuchMethod(
            Invocation.getter(#angle),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set angle(double? _angle) => super.noSuchMethod(
    Invocation.setter(#angle, _angle),
    returnValueForMissingStub: null,
  );

  @override
  _i10.SpriteType get spriteType =>
      (super.noSuchMethod(
            Invocation.getter(#spriteType),
            returnValue: _i10.SpriteType.IMAGE,
            returnValueForMissingStub: _i10.SpriteType.IMAGE,
          )
          as _i10.SpriteType);

  @override
  set spriteType(_i10.SpriteType? _spriteType) => super.noSuchMethod(
    Invocation.setter(#spriteType, _spriteType),
    returnValueForMissingStub: null,
  );

  @override
  String get color =>
      (super.noSuchMethod(
            Invocation.getter(#color),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#color),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.getter(#color),
            ),
          )
          as String);

  @override
  set color(String? _color) => super.noSuchMethod(
    Invocation.setter(#color, _color),
    returnValueForMissingStub: null,
  );

  @override
  bool get invisibleOutsideCanvas =>
      (super.noSuchMethod(
            Invocation.getter(#invisibleOutsideCanvas),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set invisibleOutsideCanvas(bool? _invisibleOutsideCanvas) =>
      super.noSuchMethod(
        Invocation.setter(#invisibleOutsideCanvas, _invisibleOutsideCanvas),
        returnValueForMissingStub: null,
      );

  @override
  int get frameIndex =>
      (super.noSuchMethod(
            Invocation.getter(#frameIndex),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set frameIndex(int? _frameIndex) => super.noSuchMethod(
    Invocation.setter(#frameIndex, _frameIndex),
    returnValueForMissingStub: null,
  );

  @override
  int get frames =>
      (super.noSuchMethod(
            Invocation.getter(#frames),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set frames(int? _frames) => super.noSuchMethod(
    Invocation.setter(#frames, _frames),
    returnValueForMissingStub: null,
  );

  @override
  int get lifeTime =>
      (super.noSuchMethod(
            Invocation.getter(#lifeTime),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set lifeTime(int? _lifeTime) => super.noSuchMethod(
    Invocation.setter(#lifeTime, _lifeTime),
    returnValueForMissingStub: null,
  );

  @override
  set networkId(int? _networkId) => super.noSuchMethod(
    Invocation.setter(#networkId, _networkId),
    returnValueForMissingStub: null,
  );

  @override
  _i10.NetworkType get networkType =>
      (super.noSuchMethod(
            Invocation.getter(#networkType),
            returnValue: _i10.NetworkType.LOCAL_ONLY,
            returnValueForMissingStub: _i10.NetworkType.LOCAL_ONLY,
          )
          as _i10.NetworkType);

  @override
  set networkType(_i10.NetworkType? _networkType) => super.noSuchMethod(
    Invocation.setter(#networkType, _networkType),
    returnValueForMissingStub: null,
  );

  @override
  set ownerId(String? _ownerId) => super.noSuchMethod(
    Invocation.setter(#ownerId, _ownerId),
    returnValueForMissingStub: null,
  );

  @override
  int get fullFramesOverNetwork =>
      (super.noSuchMethod(
            Invocation.getter(#fullFramesOverNetwork),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set fullFramesOverNetwork(int? _fullFramesOverNetwork) => super.noSuchMethod(
    Invocation.setter(#fullFramesOverNetwork, _fullFramesOverNetwork),
    returnValueForMissingStub: null,
  );

  @override
  bool get remove =>
      (super.noSuchMethod(
            Invocation.getter(#remove),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set remove(bool? _remove) => super.noSuchMethod(
    Invocation.setter(#remove, _remove),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, int> getControls() =>
      (super.noSuchMethod(
            Invocation.method(#getControls, []),
            returnValue: <String, int>{},
            returnValueForMissingStub: <String, int>{},
          )
          as Map<String, int>);

  @override
  bool isMappedKey(int? code) =>
      (super.noSuchMethod(
            Invocation.method(#isMappedKey, [code]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool drawWeaponHelpers() =>
      (super.noSuchMethod(
            Invocation.method(#drawWeaponHelpers, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasServerToOwnerData() =>
      (super.noSuchMethod(
            Invocation.method(#hasServerToOwnerData, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addServerToOwnerData(List<dynamic>? data) => super.noSuchMethod(
    Invocation.method(#addServerToOwnerData, [data]),
    returnValueForMissingStub: null,
  );

  @override
  bool parseServerToOwnerData(List<dynamic>? data, int? startAt) =>
      (super.noSuchMethod(
            Invocation.method(#parseServerToOwnerData, [data, startAt]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool inGame() =>
      (super.noSuchMethod(
            Invocation.method(#inGame, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  dynamic draw(dynamic context, bool? debug) => super.noSuchMethod(
    Invocation.method(#draw, [context, debug]),
    returnValueForMissingStub: null,
  );

  @override
  bool drawHealthBar(dynamic context) =>
      (super.noSuchMethod(
            Invocation.method(#drawHealthBar, [context]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool maybeRespawn(double? duration) =>
      (super.noSuchMethod(
            Invocation.method(#maybeRespawn, [duration]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  dynamic frame(double? duration, int? frames, [_i7.Vec2? gravity]) =>
      super.noSuchMethod(
        Invocation.method(#frame, [duration, frames, gravity]),
        returnValueForMissingStub: null,
      );

  @override
  bool checkControlKeys(double? duration) =>
      (super.noSuchMethod(
            Invocation.method(#checkControlKeys, [duration]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int extraSendFlags() =>
      (super.noSuchMethod(
            Invocation.method(#extraSendFlags, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool checkMobileControls(int? xD, dynamic yD) =>
      (super.noSuchMethod(
            Invocation.method(#checkMobileControls, [xD, yD]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool checkShouldFire() =>
      (super.noSuchMethod(
            Invocation.method(#checkShouldFire, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool takesDamage() =>
      (super.noSuchMethod(
            Invocation.method(#takesDamage, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void takeDamage(
    int? damage,
    _i10.LocalPlayerSprite? inflictor,
    _i10.Mod? mod,
  ) => super.noSuchMethod(
    Invocation.method(#takeDamage, [damage, inflictor, mod]),
    returnValueForMissingStub: null,
  );

  @override
  bool listenFor(String? key, dynamic f) =>
      (super.noSuchMethod(
            Invocation.method(#listenFor, [key, f]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool keyIsDown(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#keyIsDown, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double? keyIsDownStrength(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#keyIsDownStrength, [key]),
            returnValueForMissingStub: null,
          )
          as double?);

  @override
  void addExtraNetworkData(List<dynamic>? data) => super.noSuchMethod(
    Invocation.method(#addExtraNetworkData, [data]),
    returnValueForMissingStub: null,
  );

  @override
  void parseExtraNetworkData(List<dynamic>? data, int? startAt) =>
      super.noSuchMethod(
        Invocation.method(#parseExtraNetworkData, [data, startAt]),
        returnValueForMissingStub: null,
      );

  @override
  _i10.SpriteConstructor remoteRepresentation() =>
      (super.noSuchMethod(
            Invocation.method(#remoteRepresentation, []),
            returnValue: _i10.SpriteConstructor.DO_NOT_CREATE,
            returnValueForMissingStub: _i10.SpriteConstructor.DO_NOT_CREATE,
          )
          as _i10.SpriteConstructor);

  @override
  void setImage(int? imageId, [int? frameWidth]) => super.noSuchMethod(
    Invocation.method(#setImage, [imageId, frameWidth]),
    returnValueForMissingStub: null,
  );

  @override
  void setCenter(_i7.Vec2? center) => super.noSuchMethod(
    Invocation.method(#setCenter, [center]),
    returnValueForMissingStub: null,
  );

  @override
  double getRadius() =>
      (super.noSuchMethod(
            Invocation.method(#getRadius, []),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  void setRadius(double? radius) => super.noSuchMethod(
    Invocation.method(#setRadius, [radius]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Vec2 centerPoint() =>
      (super.noSuchMethod(
            Invocation.method(#centerPoint, []),
            returnValue: _FakeVec2_5(this, Invocation.method(#centerPoint, [])),
            returnValueForMissingStub: _FakeVec2_5(
              this,
              Invocation.method(#centerPoint, []),
            ),
          )
          as _i7.Vec2);

  @override
  bool remoteControlled() =>
      (super.noSuchMethod(
            Invocation.method(#remoteControlled, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double distanceTo(_i10.Sprite? other) =>
      (super.noSuchMethod(
            Invocation.method(#distanceTo, [other]),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);
}

/// A class which mocks [PlayerWorldSelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerWorldSelector extends _i1.Mock
    implements _i3.PlayerWorldSelector {
  @override
  void maybeSelectPlayerOrMap() => super.noSuchMethod(
    Invocation.method(#maybeSelectPlayerOrMap, []),
    returnValueForMissingStub: null,
  );

  @override
  bool worldSelectedAndLoaded() =>
      (super.noSuchMethod(
            Invocation.method(#worldSelectedAndLoaded, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  bool playerSelected() =>
      (super.noSuchMethod(
            Invocation.method(#playerSelected, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void frame(double? duration) => super.noSuchMethod(
    Invocation.method(#frame, [duration]),
    returnValueForMissingStub: null,
  );

  @override
  void drawCenteredText(String? text, [int? y = 0, int? size = 20]) =>
      super.noSuchMethod(
        Invocation.method(#drawCenteredText, [text, y, size]),
        returnValueForMissingStub: null,
      );

  @override
  void setMapForTest(String? name) => super.noSuchMethod(
    Invocation.method(#setMapForTest, [name]),
    returnValueForMissingStub: null,
  );
}
