// Mocks generated by Mockito 5.4.6 from annotations
// in dart2d/test/lib/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;
import 'dart:math' as _i7;
import 'dart:typed_data' as _i19;

import 'package:dart2d/bindings/annotations.dart' as _i3;
import 'package:dart2d/net/connection.dart' as _i9;
import 'package:dart2d/net/helpers.dart' as _i11;
import 'package:dart2d/net/negotiator.dart' as _i15;
import 'package:dart2d/net/net.dart' as _i13;
import 'package:dart2d/net/peer.dart' as _i6;
import 'package:dart2d/net/state_updates.pb.dart' as _i12;
import 'package:dart2d/phys/vec2.dart' as _i8;
import 'package:dart2d/res/imageindex.dart' as _i14;
import 'package:dart2d/res/sounds.dart' as _i20;
import 'package:dart2d/sprites/sprites.dart' as _i10;
import 'package:dart2d/util/util.dart' as _i5;
import 'package:dart2d/weapons/weapon_state.dart' as _i21;
import 'package:dart2d/worlds/worlds.dart' as _i4;
import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:web/web.dart' as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageFactory_1 extends _i1.SmartFake implements _i3.ImageFactory {
  _FakeImageFactory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWormWorld_2 extends _i1.SmartFake implements _i4.WormWorld {
  _FakeWormWorld_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameState_3 extends _i1.SmartFake implements _i5.GameState {
  _FakeGameState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePeerWrapper_4 extends _i1.SmartFake implements _i6.PeerWrapper {
  _FakePeerWrapper_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionFactory_5 extends _i1.SmartFake
    implements _i3.ConnectionFactory {
  _FakeConnectionFactory_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePoint_6<T extends num> extends _i1.SmartFake
    implements _i7.Point<T> {
  _FakePoint_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVec2_7 extends _i1.SmartFake implements _i8.Vec2 {
  _FakeVec2_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeServerChannel_8 extends _i1.SmartFake implements _i3.ServerChannel {
  _FakeServerChannel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionWrapper_9 extends _i1.SmartFake
    implements _i9.ConnectionWrapper {
  _FakeConnectionWrapper_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoader_10 extends _i1.SmartFake implements _i4.Loader {
  _FakeLoader_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpriteIndex_11 extends _i1.SmartFake implements _i10.SpriteIndex {
  _FakeSpriteIndex_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyState_12 extends _i1.SmartFake implements _i5.KeyState {
  _FakeKeyState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHudMessages_13 extends _i1.SmartFake implements _i5.HudMessages {
  _FakeHudMessages_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeByteWorld_14 extends _i1.SmartFake implements _i4.ByteWorld {
  _FakeByteWorld_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacketListenerBindings_15 extends _i1.SmartFake
    implements _i11.PacketListenerBindings {
  _FakePacketListenerBindings_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalStorage_16 extends _i1.SmartFake implements _i3.LocalStorage {
  _FakeLocalStorage_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeByteWorldDestruction_17 extends _i1.SmartFake
    implements _i12.ByteWorldDestruction {
  _FakeByteWorldDestruction_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeByteWorldDraw_18 extends _i1.SmartFake
    implements _i12.ByteWorldDraw {
  _FakeByteWorldDraw_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetwork_19 extends _i1.SmartFake implements _i13.Network {
  _FakeNetwork_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageIndex_20 extends _i1.SmartFake implements _i14.ImageIndex {
  _FakeImageIndex_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFpsCounter_21 extends _i1.SmartFake implements _i5.FpsCounter {
  _FakeFpsCounter_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigParams_22 extends _i1.SmartFake implements _i5.ConfigParams {
  _FakeConfigParams_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_23 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandom_24 extends _i1.SmartFake implements _i7.Random {
  _FakeRandom_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNegotiator_25 extends _i1.SmartFake implements _i15.Negotiator {
  _FakeNegotiator_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_26 extends _i1.SmartFake implements Duration {
  _FakeDuration_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReliableHelper_27 extends _i1.SmartFake
    implements _i11.ReliableHelper {
  _FakeReliableHelper_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyStateProto_28 extends _i1.SmartFake
    implements _i12.KeyStateProto {
  _FakeKeyStateProto_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameStateProto_29 extends _i1.SmartFake
    implements _i12.GameStateProto {
  _FakeGameStateProto_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerInfoProto_30 extends _i1.SmartFake
    implements _i12.PlayerInfoProto {
  _FakePlayerInfoProto_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataCounter_31 extends _i1.SmartFake implements _i13.DataCounter {
  _FakeDataCounter_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResourceRequest_32 extends _i1.SmartFake
    implements _i12.ResourceRequest {
  _FakeResourceRequest_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovingSprite_33 extends _i1.SmartFake implements _i10.MovingSprite {
  _FakeMovingSprite_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExtraSpriteData_34 extends _i1.SmartFake
    implements _i12.ExtraSpriteData {
  _FakeExtraSpriteData_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageIndex].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageIndex extends _i1.Mock implements _i14.ImageIndex {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  Map<String, int> get imageByName => (super.noSuchMethod(
        Invocation.getter(#imageByName),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);

  @override
  Map<int, bool> get loadedImages => (super.noSuchMethod(
        Invocation.getter(#loadedImages),
        returnValue: <int, bool>{},
        returnValueForMissingStub: <int, bool>{},
      ) as Map<int, bool>);

  @override
  List<_i16.HTMLImageElement> get images => (super.noSuchMethod(
        Invocation.getter(#images),
        returnValue: <_i16.HTMLImageElement>[],
        returnValueForMissingStub: <_i16.HTMLImageElement>[],
      ) as List<_i16.HTMLImageElement>);

  @override
  _i3.ImageFactory get imageFactory => (super.noSuchMethod(
        Invocation.getter(#imageFactory),
        returnValue: _FakeImageFactory_1(
          this,
          Invocation.getter(#imageFactory),
        ),
        returnValueForMissingStub: _FakeImageFactory_1(
          this,
          Invocation.getter(#imageFactory),
        ),
      ) as _i3.ImageFactory);

  @override
  set imageByName(Map<String, int>? _imageByName) => super.noSuchMethod(
        Invocation.setter(
          #imageByName,
          _imageByName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loadedImages(Map<int, bool>? _loadedImages) => super.noSuchMethod(
        Invocation.setter(
          #loadedImages,
          _loadedImages,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set images(List<_i16.HTMLImageElement>? _images) => super.noSuchMethod(
        Invocation.setter(
          #images,
          _images,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addEmptyImageForTest(String? name) => super.noSuchMethod(
        Invocation.method(
          #addEmptyImageForTest,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getImageByName(String? name) => super.noSuchMethod(
        Invocation.method(
          #getImageByName,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getImageIdByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getImageIdByName,
          [name],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  dynamic getImageById(int? id) => super.noSuchMethod(
        Invocation.method(
          #getImageById,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool finishedLoadingImages() => (super.noSuchMethod(
        Invocation.method(
          #finishedLoadingImages,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool playerResourcesLoaded() => (super.noSuchMethod(
        Invocation.method(
          #playerResourcesLoaded,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool worldResourcesLoaded() => (super.noSuchMethod(
        Invocation.method(
          #worldResourcesLoaded,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool gameResourcesLoaded() => (super.noSuchMethod(
        Invocation.method(
          #gameResourcesLoaded,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<int> orderedImageIds() => (super.noSuchMethod(
        Invocation.method(
          #orderedImageIds,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  String imagesLoadedString() => (super.noSuchMethod(
        Invocation.method(
          #imagesLoadedString,
          [],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #imagesLoadedString,
            [],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #imagesLoadedString,
            [],
          ),
        ),
      ) as String);

  @override
  dynamic addImagesFromServer([String? path = './img/']) => super.noSuchMethod(
        Invocation.method(
          #addImagesFromServer,
          [path],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<dynamic> addFromImageData(
    int? index,
    String? data,
    bool? allowCaching,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFromImageData,
          [
            index,
            data,
            allowCaching,
          ],
        ),
        returnValue: _i18.Future<dynamic>.value(),
        returnValueForMissingStub: _i18.Future<dynamic>.value(),
      ) as _i18.Future<dynamic>);

  @override
  void addImagesFromNetwork() => super.noSuchMethod(
        Invocation.method(
          #addImagesFromNetwork,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool imagesIndexed() => (super.noSuchMethod(
        Invocation.method(
          #imagesIndexed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String getImageDataUrl(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getImageDataUrl,
          [index],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #getImageDataUrl,
            [index],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #getImageDataUrl,
            [index],
          ),
        ),
      ) as String);

  @override
  _i18.Future<dynamic> addSingleImage(
    String? imgName, [
    String? path = './img/',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSingleImage,
          [
            imgName,
            path,
          ],
        ),
        returnValue: _i18.Future<dynamic>.value(),
        returnValueForMissingStub: _i18.Future<dynamic>.value(),
      ) as _i18.Future<dynamic>);

  @override
  String imageNameFromIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #imageNameFromIndex,
          [index],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #imageNameFromIndex,
            [index],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #imageNameFromIndex,
            [index],
          ),
        ),
      ) as String);

  @override
  Map<String, int> allImagesByName() => (super.noSuchMethod(
        Invocation.method(
          #allImagesByName,
          [],
        ),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);

  @override
  bool imageIsLoaded(int? index) => (super.noSuchMethod(
        Invocation.method(
          #imageIsLoaded,
          [index],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool imageIsLoading(int? index) => (super.noSuchMethod(
        Invocation.method(
          #imageIsLoading,
          [index],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void clearImageLoader(int? index) => super.noSuchMethod(
        Invocation.method(
          #clearImageLoader,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool imageNameIsLoaded(String? name) => (super.noSuchMethod(
        Invocation.method(
          #imageNameIsLoaded,
          [name],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i13.Network {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i4.WormWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
        returnValueForMissingStub: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
      ) as _i4.WormWorld);

  @override
  _i5.GameState get gameState => (super.noSuchMethod(
        Invocation.getter(#gameState),
        returnValue: _FakeGameState_3(
          this,
          Invocation.getter(#gameState),
        ),
        returnValueForMissingStub: _FakeGameState_3(
          this,
          Invocation.getter(#gameState),
        ),
      ) as _i5.GameState);

  @override
  _i6.PeerWrapper get peer => (super.noSuchMethod(
        Invocation.getter(#peer),
        returnValue: _FakePeerWrapper_4(
          this,
          Invocation.getter(#peer),
        ),
        returnValueForMissingStub: _FakePeerWrapper_4(
          this,
          Invocation.getter(#peer),
        ),
      ) as _i6.PeerWrapper);

  @override
  int get commanderFramesBehind => (super.noSuchMethod(
        Invocation.getter(#commanderFramesBehind),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.ConnectionFactory get connectionFactory => (super.noSuchMethod(
        Invocation.getter(#connectionFactory),
        returnValue: _FakeConnectionFactory_5(
          this,
          Invocation.getter(#connectionFactory),
        ),
        returnValueForMissingStub: _FakeConnectionFactory_5(
          this,
          Invocation.getter(#connectionFactory),
        ),
      ) as _i3.ConnectionFactory);

  @override
  set world(_i4.WormWorld? _world) => super.noSuchMethod(
        Invocation.setter(
          #world,
          _world,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gameState(_i5.GameState? _gameState) => super.noSuchMethod(
        Invocation.setter(
          #gameState,
          _gameState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set peer(_i6.PeerWrapper? _peer) => super.noSuchMethod(
        Invocation.setter(
          #peer,
          _peer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set commanderFramesBehind(int? _commanderFramesBehind) => super.noSuchMethod(
        Invocation.setter(
          #commanderFramesBehind,
          _commanderFramesBehind,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double getCurrentFps() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentFps,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  String? findNewCommander(
    Map<dynamic, dynamic>? connections, {
    bool? ignoreSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findNewCommander,
          [connections],
          {#ignoreSelf: ignoreSelf},
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  void resetGameConnections() => super.noSuchMethod(
        Invocation.method(
          #resetGameConnections,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void convertToCommander(
    Map<String, _i9.ConnectionWrapper>? connections,
    _i12.PlayerInfoProto? previousCommanderPlayerInfo,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #convertToCommander,
          [
            connections,
            previousCommanderPlayerInfo,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.PeerWrapper getPeer() => (super.noSuchMethod(
        Invocation.method(
          #getPeer,
          [],
        ),
        returnValue: _FakePeerWrapper_4(
          this,
          Invocation.method(
            #getPeer,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePeerWrapper_4(
          this,
          Invocation.method(
            #getPeer,
            [],
          ),
        ),
      ) as _i6.PeerWrapper);

  @override
  _i5.GameState getGameState() => (super.noSuchMethod(
        Invocation.method(
          #getGameState,
          [],
        ),
        returnValue: _FakeGameState_3(
          this,
          Invocation.method(
            #getGameState,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeGameState_3(
          this,
          Invocation.method(
            #getGameState,
            [],
          ),
        ),
      ) as _i5.GameState);

  @override
  Map<String, _i9.ConnectionWrapper> safeActiveConnections() =>
      (super.noSuchMethod(
        Invocation.method(
          #safeActiveConnections,
          [],
        ),
        returnValue: <String, _i9.ConnectionWrapper>{},
        returnValueForMissingStub: <String, _i9.ConnectionWrapper>{},
      ) as Map<String, _i9.ConnectionWrapper>);

  @override
  bool findActiveGameConnection() => (super.noSuchMethod(
        Invocation.method(
          #findActiveGameConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasNetworkProblem() => (super.noSuchMethod(
        Invocation.method(
          #hasNetworkProblem,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void sendMessage(
    String? message, [
    String? dontSendTo,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            dontSendTo,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void maybeSendLocalKeyStateUpdate() => super.noSuchMethod(
        Invocation.method(
          #maybeSendLocalKeyStateUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void frame(
    double? duration,
    List<int>? removals,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #frame,
          [
            duration,
            removals,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPendingCommandTransferForTest(String? pendingCommandTransfer) =>
      super.noSuchMethod(
        Invocation.method(
          #setPendingCommandTransferForTest,
          [pendingCommandTransfer],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isCommander() => (super.noSuchMethod(
        Invocation.method(
          #isCommander,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setAsActingCommander() => super.noSuchMethod(
        Invocation.method(
          #setAsActingCommander,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int slowCommandingFrames() => (super.noSuchMethod(
        Invocation.method(
          #slowCommandingFrames,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool isTooSlowForCommanding() => (super.noSuchMethod(
        Invocation.method(
          #isTooSlowForCommanding,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasReadyConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasReadyConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasOpenConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasOpenConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> keyFrameDebugData() => (super.noSuchMethod(
        Invocation.method(
          #keyFrameDebugData,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  void parseBundle(
    _i9.ConnectionWrapper? connection,
    _i12.GameStateUpdates? data,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #parseBundle,
          [
            connection,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateBundle(
    bool? keyFrame,
    _i12.GameStateUpdates? updates,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #stateBundle,
          [
            keyFrame,
            updates,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HudMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockHudMessages extends _i1.Mock implements _i5.HudMessages {
  @override
  List<_i5.HudMessage> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: <_i5.HudMessage>[],
        returnValueForMissingStub: <_i5.HudMessage>[],
      ) as List<_i5.HudMessage>);

  @override
  set messages(List<_i5.HudMessage>? _messages) => super.noSuchMethod(
        Invocation.setter(
          #messages,
          _messages,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void display(
    String? message, [
    double? period = 4.0,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #display,
          [
            message,
            period,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldDrawTable() => (super.noSuchMethod(
        Invocation.method(
          #shouldDrawTable,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void showGameTable(
    _i4.WormWorld? world,
    _i16.CanvasRenderingContext2D? context,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showGameTable,
          [
            world,
            context,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(
    _i4.WormWorld? world,
    _i16.CanvasRenderingContext2D? context,
    double? timeSpent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #render,
          [
            world,
            context,
            timeSpent,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PacketListenerBindings].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacketListenerBindings extends _i1.Mock
    implements _i11.PacketListenerBindings {
  @override
  dynamic bindHandler(
    _i12.StateUpdate_Update? key,
    dynamic handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #bindHandler,
          [
            key,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> handlerFor(_i12.StateUpdate_Update? key) => (super.noSuchMethod(
        Invocation.method(
          #handlerFor,
          [key],
        ),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  bool hasHandler(_i12.StateUpdate_Update? key) => (super.noSuchMethod(
        Invocation.method(
          #hasHandler,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [ConnectionFrameHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionFrameHandler extends _i1.Mock
    implements _i11.ConnectionFrameHandler {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  dynamic reportFrameRates(
    double? receivingClientFps,
    double? ourFps,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #reportFrameRates,
          [
            receivingClientFps,
            ourFps,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool tick(double? duration) => (super.noSuchMethod(
        Invocation.method(
          #tick,
          [duration],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool keyFrame() => (super.noSuchMethod(
        Invocation.method(
          #keyFrame,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int currentKeyFrame() => (super.noSuchMethod(
        Invocation.method(
          #currentKeyFrame,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int currentFrame() => (super.noSuchMethod(
        Invocation.method(
          #currentFrame,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int currentFrameRate() => (super.noSuchMethod(
        Invocation.method(
          #currentFrameRate,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [ByteWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockByteWorld extends _i1.Mock implements _i4.ByteWorld {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i7.Point<int> get viewSize => (super.noSuchMethod(
        Invocation.getter(#viewSize),
        returnValue: _FakePoint_6<int>(
          this,
          Invocation.getter(#viewSize),
        ),
        returnValueForMissingStub: _FakePoint_6<int>(
          this,
          Invocation.getter(#viewSize),
        ),
      ) as _i7.Point<int>);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set viewSize(_i7.Point<int>? _viewSize) => super.noSuchMethod(
        Invocation.setter(
          #viewSize,
          _viewSize,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set canvas(_i16.HTMLCanvasElement? _canvas) => super.noSuchMethod(
        Invocation.setter(
          #canvas,
          _canvas,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setWorldImage(_i16.HTMLImageElement? image) => super.noSuchMethod(
        Invocation.method(
          #setWorldImage,
          [image],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool worldImageSet() => (super.noSuchMethod(
        Invocation.method(
          #worldImageSet,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool bedrockComputed() => (super.noSuchMethod(
        Invocation.method(
          #bedrockComputed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool byteWorldReady() => (super.noSuchMethod(
        Invocation.method(
          #byteWorldReady,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void bedrockStep() => super.noSuchMethod(
        Invocation.method(
          #bedrockStep,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double percentComplete() => (super.noSuchMethod(
        Invocation.method(
          #percentComplete,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i19.Uint8ClampedList getImageData(
    _i8.Vec2? pos,
    _i8.Vec2? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImageData,
          [
            pos,
            size,
          ],
        ),
        returnValue: _i17.dummyValue<_i19.Uint8ClampedList>(
          this,
          Invocation.method(
            #getImageData,
            [
              pos,
              size,
            ],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<_i19.Uint8ClampedList>(
          this,
          Invocation.method(
            #getImageData,
            [
              pos,
              size,
            ],
          ),
        ),
      ) as _i19.Uint8ClampedList);

  @override
  _i19.Uint8ClampedList getImageDataFor(
    int? x,
    dynamic y,
    dynamic w,
    dynamic h,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImageDataFor,
          [
            x,
            y,
            w,
            h,
          ],
        ),
        returnValue: _i17.dummyValue<_i19.Uint8ClampedList>(
          this,
          Invocation.method(
            #getImageDataFor,
            [
              x,
              y,
              w,
              h,
            ],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<_i19.Uint8ClampedList>(
          this,
          Invocation.method(
            #getImageDataFor,
            [
              x,
              y,
              w,
              h,
            ],
          ),
        ),
      ) as _i19.Uint8ClampedList);

  @override
  void drawAt(
    _i16.CanvasRenderingContext2D? canvas,
    dynamic x,
    dynamic y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawAt,
          [
            canvas,
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawAsMiniMap(
    dynamic canvas,
    dynamic x,
    dynamic y, [
    double? wScale = 0.1,
    double? hScale = 0.1,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #drawAsMiniMap,
          [
            canvas,
            x,
            y,
            wScale,
            hScale,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isCanvasCollide(
    int? x,
    int? y, [
    int? width = 1,
    int? height = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCanvasCollide,
          [
            x,
            y,
            width,
            height,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic clearAtRect(
    int? x,
    int? y,
    int? width,
    int? height,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #clearAtRect,
          [
            x,
            y,
            width,
            height,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String asDataUrl() => (super.noSuchMethod(
        Invocation.method(
          #asDataUrl,
          [],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #asDataUrl,
            [],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #asDataUrl,
            [],
          ),
        ),
      ) as String);

  @override
  dynamic drawFromNetworkUpdate(_i12.ByteWorldDraw? data) => super.noSuchMethod(
        Invocation.method(
          #drawFromNetworkUpdate,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic fillRectAt(
    _i8.Vec2? pos,
    _i8.Vec2? size,
    String? colorString,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #fillRectAt,
          [
            pos,
            size,
            colorString,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic clearAt(
    _i8.Vec2? pos,
    double? radius,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #clearAt,
          [
            pos,
            radius,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Vec2 randomNotSolidPoint(_i8.Vec2? sizeOffset) => (super.noSuchMethod(
        Invocation.method(
          #randomNotSolidPoint,
          [sizeOffset],
        ),
        returnValue: _FakeVec2_7(
          this,
          Invocation.method(
            #randomNotSolidPoint,
            [sizeOffset],
          ),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.method(
            #randomNotSolidPoint,
            [sizeOffset],
          ),
        ),
      ) as _i8.Vec2);
}

/// A class which mocks [PeerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerWrapper extends _i1.Mock implements _i6.PeerWrapper {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i3.ServerChannel get serverChannel => (super.noSuchMethod(
        Invocation.getter(#serverChannel),
        returnValue: _FakeServerChannel_8(
          this,
          Invocation.getter(#serverChannel),
        ),
        returnValueForMissingStub: _FakeServerChannel_8(
          this,
          Invocation.getter(#serverChannel),
        ),
      ) as _i3.ServerChannel);

  @override
  Map<String, _i9.ConnectionWrapper> get connections => (super.noSuchMethod(
        Invocation.getter(#connections),
        returnValue: <String, _i9.ConnectionWrapper>{},
        returnValueForMissingStub: <String, _i9.ConnectionWrapper>{},
      ) as Map<String, _i9.ConnectionWrapper>);

  @override
  set serverChannel(_i3.ServerChannel? _serverChannel) => super.noSuchMethod(
        Invocation.setter(
          #serverChannel,
          _serverChannel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connections(Map<String, _i9.ConnectionWrapper>? _connections) =>
      super.noSuchMethod(
        Invocation.setter(
          #connections,
          _connections,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.ConnectionWrapper connectTo(String? id) => (super.noSuchMethod(
        Invocation.method(
          #connectTo,
          [id],
        ),
        returnValue: _FakeConnectionWrapper_9(
          this,
          Invocation.method(
            #connectTo,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakeConnectionWrapper_9(
          this,
          Invocation.method(
            #connectTo,
            [id],
          ),
        ),
      ) as _i9.ConnectionWrapper);

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reconnect() => super.noSuchMethod(
        Invocation.method(
          #reconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    dynamic unusedThis,
    dynamic e,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            unusedThis,
            e,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasMaxAutoConnections() => (super.noSuchMethod(
        Invocation.method(
          #hasMaxAutoConnections,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool autoConnectToPeers() => (super.noSuchMethod(
        Invocation.method(
          #autoConnectToPeers,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasConnections() => (super.noSuchMethod(
        Invocation.method(
          #hasConnections,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasConnectionTo(dynamic id) => (super.noSuchMethod(
        Invocation.method(
          #hasConnectionTo,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasHadConnectionTo(String? id) => (super.noSuchMethod(
        Invocation.method(
          #hasHadConnectionTo,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void tickConnections(
    double? duration,
    List<int>? removals,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #tickConnections,
          [
            duration,
            removals,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendSingleStateUpdate(
    _i12.StateUpdate? data, {
    String? dontSendTo = null,
    String? onlySendTo = null,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sendSingleStateUpdate,
          [data],
          {
            #dontSendTo: dontSendTo,
            #onlySendTo: onlySendTo,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendDataWithKeyFramesToAll(
    _i12.GameStateUpdates? data, {
    String? dontSendTo,
    String? onlySendTo,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sendDataWithKeyFramesToAll,
          [data],
          {
            #dontSendTo: dontSendTo,
            #onlySendTo: onlySendTo,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void healthCheckConnection(String? id) => super.noSuchMethod(
        Invocation.method(
          #healthCheckConnection,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeClosedConnection(String? id) => super.noSuchMethod(
        Invocation.method(
          #removeClosedConnection,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool connectionsExhausted() => (super.noSuchMethod(
        Invocation.method(
          #connectionsExhausted,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool noMoreConnectionsAvailable() => (super.noSuchMethod(
        Invocation.method(
          #noMoreConnectionsAvailable,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasReceivedActiveIds() => (super.noSuchMethod(
        Invocation.method(
          #hasReceivedActiveIds,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool connectedToServer() => (super.noSuchMethod(
        Invocation.method(
          #connectedToServer,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [FpsCounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockFpsCounter extends _i1.Mock implements _i5.FpsCounter {
  @override
  int get frames => (super.noSuchMethod(
        Invocation.getter(#frames),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set frames(int? _frames) => super.noSuchMethod(
        Invocation.setter(
          #frames,
          _frames,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool timeSingleFrame(double? time) => (super.noSuchMethod(
        Invocation.method(
          #timeSingleFrame,
          [time],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool timeWithFrames(
    double? time,
    int? framesPassed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeWithFrames,
          [
            time,
            framesPassed,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double fps() => (super.noSuchMethod(
        Invocation.method(
          #fps,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  dynamic setFpsForTest(double? fps) => super.noSuchMethod(
        Invocation.method(
          #setFpsForTest,
          [fps],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WormWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockWormWorld extends _i1.Mock implements _i4.WormWorld {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i4.Loader get loader => (super.noSuchMethod(
        Invocation.getter(#loader),
        returnValue: _FakeLoader_10(
          this,
          Invocation.getter(#loader),
        ),
        returnValueForMissingStub: _FakeLoader_10(
          this,
          Invocation.getter(#loader),
        ),
      ) as _i4.Loader);

  @override
  _i10.SpriteIndex get spriteIndex => (super.noSuchMethod(
        Invocation.getter(#spriteIndex),
        returnValue: _FakeSpriteIndex_11(
          this,
          Invocation.getter(#spriteIndex),
        ),
        returnValueForMissingStub: _FakeSpriteIndex_11(
          this,
          Invocation.getter(#spriteIndex),
        ),
      ) as _i10.SpriteIndex);

  @override
  _i5.KeyState get localKeyState => (super.noSuchMethod(
        Invocation.getter(#localKeyState),
        returnValue: _FakeKeyState_12(
          this,
          Invocation.getter(#localKeyState),
        ),
        returnValueForMissingStub: _FakeKeyState_12(
          this,
          Invocation.getter(#localKeyState),
        ),
      ) as _i5.KeyState);

  @override
  _i5.HudMessages get hudMessages => (super.noSuchMethod(
        Invocation.getter(#hudMessages),
        returnValue: _FakeHudMessages_13(
          this,
          Invocation.getter(#hudMessages),
        ),
        returnValueForMissingStub: _FakeHudMessages_13(
          this,
          Invocation.getter(#hudMessages),
        ),
      ) as _i5.HudMessages);

  @override
  _i8.Vec2 get viewPoint => (super.noSuchMethod(
        Invocation.getter(#viewPoint),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#viewPoint),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#viewPoint),
        ),
      ) as _i8.Vec2);

  @override
  _i8.Vec2 get halfWorld => (super.noSuchMethod(
        Invocation.getter(#halfWorld),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#halfWorld),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#halfWorld),
        ),
      ) as _i8.Vec2);

  @override
  _i4.ByteWorld get byteWorld => (super.noSuchMethod(
        Invocation.getter(#byteWorld),
        returnValue: _FakeByteWorld_14(
          this,
          Invocation.getter(#byteWorld),
        ),
        returnValueForMissingStub: _FakeByteWorld_14(
          this,
          Invocation.getter(#byteWorld),
        ),
      ) as _i4.ByteWorld);

  @override
  _i8.Vec2 get gravity => (super.noSuchMethod(
        Invocation.getter(#gravity),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#gravity),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#gravity),
        ),
      ) as _i8.Vec2);

  @override
  double get explosionFlash => (super.noSuchMethod(
        Invocation.getter(#explosionFlash),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get soundEnabled => (super.noSuchMethod(
        Invocation.getter(#soundEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.PacketListenerBindings get packetListenerBindings => (super.noSuchMethod(
        Invocation.getter(#packetListenerBindings),
        returnValue: _FakePacketListenerBindings_15(
          this,
          Invocation.getter(#packetListenerBindings),
        ),
        returnValueForMissingStub: _FakePacketListenerBindings_15(
          this,
          Invocation.getter(#packetListenerBindings),
        ),
      ) as _i11.PacketListenerBindings);

  @override
  bool get isCommander => (super.noSuchMethod(
        Invocation.getter(#isCommander),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.LocalStorage get localStorage => (super.noSuchMethod(
        Invocation.getter(#localStorage),
        returnValue: _FakeLocalStorage_16(
          this,
          Invocation.getter(#localStorage),
        ),
        returnValueForMissingStub: _FakeLocalStorage_16(
          this,
          Invocation.getter(#localStorage),
        ),
      ) as _i3.LocalStorage);

  @override
  set loader(_i4.Loader? _loader) => super.noSuchMethod(
        Invocation.setter(
          #loader,
          _loader,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set spriteIndex(_i10.SpriteIndex? _spriteIndex) => super.noSuchMethod(
        Invocation.setter(
          #spriteIndex,
          _spriteIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set localKeyState(_i5.KeyState? _localKeyState) => super.noSuchMethod(
        Invocation.setter(
          #localKeyState,
          _localKeyState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set hudMessages(_i5.HudMessages? _hudMessages) => super.noSuchMethod(
        Invocation.setter(
          #hudMessages,
          _hudMessages,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set viewPoint(_i8.Vec2? _viewPoint) => super.noSuchMethod(
        Invocation.setter(
          #viewPoint,
          _viewPoint,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set halfWorld(_i8.Vec2? _halfWorld) => super.noSuchMethod(
        Invocation.setter(
          #halfWorld,
          _halfWorld,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set byteWorld(_i4.ByteWorld? _byteWorld) => super.noSuchMethod(
        Invocation.setter(
          #byteWorld,
          _byteWorld,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gravity(_i8.Vec2? _gravity) => super.noSuchMethod(
        Invocation.setter(
          #gravity,
          _gravity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set explosionFlash(double? _explosionFlash) => super.noSuchMethod(
        Invocation.setter(
          #explosionFlash,
          _explosionFlash,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set soundEnabled(bool? _soundEnabled) => super.noSuchMethod(
        Invocation.setter(
          #soundEnabled,
          _soundEnabled,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get invalidKeysPressed => (super.noSuchMethod(
        Invocation.getter(#invalidKeysPressed),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get spriteNetworkId => (super.noSuchMethod(
        Invocation.getter(#spriteNetworkId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get restart => (super.noSuchMethod(
        Invocation.getter(#restart),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get freeze => (super.noSuchMethod(
        Invocation.getter(#freeze),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get controlHelperTime => (super.noSuchMethod(
        Invocation.getter(#controlHelperTime),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  set invalidKeysPressed(int? _invalidKeysPressed) => super.noSuchMethod(
        Invocation.setter(
          #invalidKeysPressed,
          _invalidKeysPressed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set playerSprite(_i10.LocalPlayerSprite? _playerSprite) => super.noSuchMethod(
        Invocation.setter(
          #playerSprite,
          _playerSprite,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set spriteNetworkId(int? _spriteNetworkId) => super.noSuchMethod(
        Invocation.setter(
          #spriteNetworkId,
          _spriteNetworkId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set restart(bool? _restart) => super.noSuchMethod(
        Invocation.setter(
          #restart,
          _restart,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set freeze(bool? _freeze) => super.noSuchMethod(
        Invocation.setter(
          #freeze,
          _freeze,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set controlHelperTime(double? _controlHelperTime) => super.noSuchMethod(
        Invocation.setter(
          #controlHelperTime,
          _controlHelperTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void collisionCheck(
    int? networkId,
    dynamic duration,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #collisionCheck,
          [
            networkId,
            duration,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void connectTo(
    dynamic id, [
    String? name = null,
    bool? startGame = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #connectTo,
          [
            id,
            name,
            startGame,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void displayHudMessageAndSendToNetwork(
    String? message, [
    double? period,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #displayHudMessageAndSendToNetwork,
          [
            message,
            period,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool loaderCompleted() => (super.noSuchMethod(
        Invocation.method(
          #loaderCompleted,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void frameDraw([
    double? duration = 0.01,
    bool? slowDown = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #frameDraw,
          [
            duration,
            slowDown,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void checkWinner(_i12.PlayerInfoProto? info) => super.noSuchMethod(
        Invocation.method(
          #checkWinner,
          [info],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldDraw(_i10.Sprite? sprite) => (super.noSuchMethod(
        Invocation.method(
          #shouldDraw,
          [sprite],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void playSound(
    _i20.Sound? sound, {
    double? volume = 1.0,
    bool? multiPlay = false,
    String? playId = null,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #playSound,
          [sound],
          {
            #volume: volume,
            #multiPlay: multiPlay,
            #playId: playId,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void playSoundAtSprite(
    _i10.Sprite? sprite,
    _i20.Sound? sound, {
    dynamic multiPlay = false,
    dynamic playSpriteId = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #playSoundAtSprite,
          [
            sprite,
            sound,
          ],
          {
            #multiPlay: multiPlay,
            #playSpriteId: playSpriteId,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createLocalClient(
    int? spriteId,
    _i8.Vec2? position,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createLocalClient,
          [
            spriteId,
            position,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addLocalPlayerSprite(String? name) => super.noSuchMethod(
        Invocation.method(
          #addLocalPlayerSprite,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void adjustPlayerSprite(
    _i10.LocalPlayerSprite? playerSprite,
    int? playerSpriteId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #adjustPlayerSprite,
          [
            playerSprite,
            playerSpriteId,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addParticlesFromNetworkData(_i12.StateUpdate? data) =>
      super.noSuchMethod(
        Invocation.method(
          #addParticlesFromNetworkData,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void explosionAt({
    required _i8.Vec2? location,
    _i8.Vec2? velocity,
    bool? addParticles = false,
    required int? damage,
    required double? radius,
    _i10.LocalPlayerSprite? damagerDoer,
    bool? fromNetwork = false,
    _i10.Mod? mod = _i10.Mod.UNKNOWN,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #explosionAt,
          [],
          {
            #location: location,
            #velocity: velocity,
            #addParticles: addParticles,
            #damage: damage,
            #radius: radius,
            #damagerDoer: damagerDoer,
            #fromNetwork: fromNetwork,
            #mod: mod,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fillRectAt(
    _i8.Vec2? pos,
    _i8.Vec2? size,
    String? colorString, [
    bool? fromNetwork = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #fillRectAt,
          [
            pos,
            size,
            colorString,
            fromNetwork,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int advanceFrames(double? duration) => (super.noSuchMethod(
        Invocation.method(
          #advanceFrames,
          [duration],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void explosionAtSprite({
    required _i10.Sprite? sprite,
    required _i8.Vec2? velocity,
    bool? addpParticles = false,
    required int? damage,
    required double? radius,
    required _i10.LocalPlayerSprite? damageDoer,
    bool? fromNetwork = false,
    _i10.Mod? mod = _i10.Mod.UNKNOWN,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #explosionAtSprite,
          [],
          {
            #sprite: sprite,
            #velocity: velocity,
            #addpParticles: addpParticles,
            #damage: damage,
            #radius: radius,
            #damageDoer: damageDoer,
            #fromNetwork: fromNetwork,
            #mod: mod,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearWorldArea(
    _i8.Vec2? location,
    double? radius,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #clearWorldArea,
          [
            location,
            radius,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void connectToAllPeersInGameState() => super.noSuchMethod(
        Invocation.method(
          #connectToAllPeersInGameState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic clearFromNetworkUpdate(_i12.ByteWorldDestruction? data) =>
      super.noSuchMethod(
        Invocation.method(
          #clearFromNetworkUpdate,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.ByteWorldDestruction destructionAsNetworkUpdate(
    _i8.Vec2? pos,
    _i8.Vec2? velocity,
    double? radius,
    int? damage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #destructionAsNetworkUpdate,
          [
            pos,
            velocity,
            radius,
            damage,
          ],
        ),
        returnValue: _FakeByteWorldDestruction_17(
          this,
          Invocation.method(
            #destructionAsNetworkUpdate,
            [
              pos,
              velocity,
              radius,
              damage,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeByteWorldDestruction_17(
          this,
          Invocation.method(
            #destructionAsNetworkUpdate,
            [
              pos,
              velocity,
              radius,
              damage,
            ],
          ),
        ),
      ) as _i12.ByteWorldDestruction);

  @override
  _i12.ByteWorldDraw drawAsNetworkUpdate(
    _i8.Vec2? pos,
    _i8.Vec2? size,
    String? colorString,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #drawAsNetworkUpdate,
          [
            pos,
            size,
            colorString,
          ],
        ),
        returnValue: _FakeByteWorldDraw_18(
          this,
          Invocation.method(
            #drawAsNetworkUpdate,
            [
              pos,
              size,
              colorString,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeByteWorldDraw_18(
          this,
          Invocation.method(
            #drawAsNetworkUpdate,
            [
              pos,
              size,
              colorString,
            ],
          ),
        ),
      ) as _i12.ByteWorldDraw);

  @override
  void addVelocityFromExplosion(
    _i8.Vec2? location,
    int? damage,
    double? radius,
    bool? doDamage,
    _i10.LocalPlayerSprite? damageDoer,
    _i10.Mod? mod,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addVelocityFromExplosion,
          [
            location,
            damage,
            radius,
            doDamage,
            damageDoer,
            mod,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSprite(_i10.Sprite? sprite) => super.noSuchMethod(
        Invocation.method(
          #addSprite,
          [sprite],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeSprite(int? networkId) => super.noSuchMethod(
        Invocation.method(
          #removeSprite,
          [networkId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceSprite(
    int? id,
    _i10.Sprite? sprite,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceSprite,
          [
            id,
            sprite,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearScreen() => super.noSuchMethod(
        Invocation.method(
          #clearScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawFpsCounters() => super.noSuchMethod(
        Invocation.method(
          #drawFpsCounters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  num width() => (super.noSuchMethod(
        Invocation.method(
          #width,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  num height() => (super.noSuchMethod(
        Invocation.method(
          #height,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  _i13.Network network() => (super.noSuchMethod(
        Invocation.method(
          #network,
          [],
        ),
        returnValue: _FakeNetwork_19(
          this,
          Invocation.method(
            #network,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNetwork_19(
          this,
          Invocation.method(
            #network,
            [],
          ),
        ),
      ) as _i13.Network);

  @override
  _i14.ImageIndex imageIndex() => (super.noSuchMethod(
        Invocation.method(
          #imageIndex,
          [],
        ),
        returnValue: _FakeImageIndex_20(
          this,
          Invocation.method(
            #imageIndex,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeImageIndex_20(
          this,
          Invocation.method(
            #imageIndex,
            [],
          ),
        ),
      ) as _i14.ImageIndex);

  @override
  _i5.FpsCounter drawFps() => (super.noSuchMethod(
        Invocation.method(
          #drawFps,
          [],
        ),
        returnValue: _FakeFpsCounter_21(
          this,
          Invocation.method(
            #drawFps,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFpsCounter_21(
          this,
          Invocation.method(
            #drawFps,
            [],
          ),
        ),
      ) as _i5.FpsCounter);

  @override
  _i5.ConfigParams config() => (super.noSuchMethod(
        Invocation.method(
          #config,
          [],
        ),
        returnValue: _FakeConfigParams_22(
          this,
          Invocation.method(
            #config,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeConfigParams_22(
          this,
          Invocation.method(
            #config,
            [],
          ),
        ),
      ) as _i5.ConfigParams);
}

/// A class which mocks [ConnectionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionFactory extends _i1.Mock implements _i3.ConnectionFactory {
  @override
  dynamic connectTo(
    _i9.ConnectionWrapper? wrapper,
    _i15.Negotiator? negotiator,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #connectTo,
          [
            wrapper,
            negotiator,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic createInboundConnection(
    _i9.ConnectionWrapper? wrapper,
    _i15.Negotiator? negotiator,
    _i12.WebRtcDanceProto? proto,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createInboundConnection,
          [
            wrapper,
            negotiator,
            proto,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic handleGotAnswer(
    dynamic connection,
    _i12.WebRtcDanceProto? proto,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleGotAnswer,
          [
            connection,
            proto,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<String> getStats(dynamic connection) => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [connection],
        ),
        returnValue: _i18.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #getStats,
            [connection],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #getStats,
            [connection],
          ),
        )),
      ) as _i18.Future<String>);
}

/// A class which mocks [ConnectionWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionWrapper extends _i1.Mock implements _i9.ConnectionWrapper {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  bool get closed => (super.noSuchMethod(
        Invocation.getter(#closed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get lastSeenRemoteFrame => (super.noSuchMethod(
        Invocation.getter(#lastSeenRemoteFrame),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get lastSentFrame => (super.noSuchMethod(
        Invocation.getter(#lastSentFrame),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  DateTime get lastSentFrameTime => (super.noSuchMethod(
        Invocation.getter(#lastSentFrameTime),
        returnValue: _FakeDateTime_23(
          this,
          Invocation.getter(#lastSentFrameTime),
        ),
        returnValueForMissingStub: _FakeDateTime_23(
          this,
          Invocation.getter(#lastSentFrameTime),
        ),
      ) as DateTime);

  @override
  int get lastDeliveredFrame => (super.noSuchMethod(
        Invocation.getter(#lastDeliveredFrame),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.Random get r => (super.noSuchMethod(
        Invocation.getter(#r),
        returnValue: _FakeRandom_24(
          this,
          Invocation.getter(#r),
        ),
        returnValueForMissingStub: _FakeRandom_24(
          this,
          Invocation.getter(#r),
        ),
      ) as _i7.Random);

  @override
  _i15.Negotiator get negotiator => (super.noSuchMethod(
        Invocation.getter(#negotiator),
        returnValue: _FakeNegotiator_25(
          this,
          Invocation.getter(#negotiator),
        ),
        returnValueForMissingStub: _FakeNegotiator_25(
          this,
          Invocation.getter(#negotiator),
        ),
      ) as _i15.Negotiator);

  @override
  set closed(bool? _closed) => super.noSuchMethod(
        Invocation.setter(
          #closed,
          _closed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lastSeenRemoteFrame(int? _lastSeenRemoteFrame) => super.noSuchMethod(
        Invocation.setter(
          #lastSeenRemoteFrame,
          _lastSeenRemoteFrame,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lastSentFrame(int? _lastSentFrame) => super.noSuchMethod(
        Invocation.setter(
          #lastSentFrame,
          _lastSentFrame,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lastSentFrameTime(DateTime? _lastSentFrameTime) => super.noSuchMethod(
        Invocation.setter(
          #lastSentFrameTime,
          _lastSentFrameTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lastDeliveredFrame(int? _lastDeliveredFrame) => super.noSuchMethod(
        Invocation.setter(
          #lastDeliveredFrame,
          _lastDeliveredFrame,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set r(_i7.Random? _r) => super.noSuchMethod(
        Invocation.setter(
          #r,
          _r,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int currentKeyFrame() => (super.noSuchMethod(
        Invocation.method(
          #currentKeyFrame,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int recipientFramesBehind() => (super.noSuchMethod(
        Invocation.method(
          #recipientFramesBehind,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool isProblematicFramesBehind() => (super.noSuchMethod(
        Invocation.method(
          #isProblematicFramesBehind,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasReceivedFirstKeyFrame() => (super.noSuchMethod(
        Invocation.method(
          #hasReceivedFirstKeyFrame,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void close(String? reason) => super.noSuchMethod(
        Invocation.method(
          #close,
          [reason],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void open() => super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void connectToGame(
    String? playerName,
    int? playerImageId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #connectToGame,
          [
            playerName,
            playerImageId,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendClientEnter() => super.noSuchMethod(
        Invocation.method(
          #sendClientEnter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendCommandTransfer() => super.noSuchMethod(
        Invocation.method(
          #sendCommandTransfer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void collectRtcStats() => super.noSuchMethod(
        Invocation.method(
          #collectRtcStats,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendPing([bool? gameStatePing = false]) => super.noSuchMethod(
        Invocation.method(
          #sendPing,
          [gameStatePing],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool lastReceiveActivityOlderThan(int? millis) => (super.noSuchMethod(
        Invocation.method(
          #lastReceiveActivityOlderThan,
          [millis],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool lastSendActivityOlderThan(int? millis) => (super.noSuchMethod(
        Invocation.method(
          #lastSendActivityOlderThan,
          [millis],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool initialPongReceived() => (super.noSuchMethod(
        Invocation.method(
          #initialPongReceived,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool initialPingSent() => (super.noSuchMethod(
        Invocation.method(
          #initialPingSent,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setHandshakeReceived() => super.noSuchMethod(
        Invocation.method(
          #setHandshakeReceived,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetHandshakeReceived() => super.noSuchMethod(
        Invocation.method(
          #resetHandshakeReceived,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void markAsClientToClientConnection() => super.noSuchMethod(
        Invocation.method(
          #markAsClientToClientConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #error,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void receiveData(dynamic rawData) => super.noSuchMethod(
        Invocation.method(
          #receiveData,
          [rawData],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void checkIfShouldClose(int? keyFrame) => super.noSuchMethod(
        Invocation.method(
          #checkIfShouldClose,
          [keyFrame],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getCurrentFrame() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentFrame,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void tick(
    double? duration,
    List<int>? removals,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #tick,
          [
            duration,
            removals,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendSingleUpdate(_i12.StateUpdate? singleUpdate) => super.noSuchMethod(
        Invocation.method(
          #sendSingleUpdate,
          [singleUpdate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendData(_i12.GameStateUpdates? data) => super.noSuchMethod(
        Invocation.method(
          #sendData,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void readyDataChannel(_i16.RTCDataChannel? dataChannel) => super.noSuchMethod(
        Invocation.method(
          #readyDataChannel,
          [dataChannel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasReadyDataChannel() => (super.noSuchMethod(
        Invocation.method(
          #hasReadyDataChannel,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setRtcConnection(_i16.RTCPeerConnection? rtcConnection) =>
      super.noSuchMethod(
        Invocation.method(
          #setRtcConnection,
          [rtcConnection],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration lastDataReceived() => (super.noSuchMethod(
        Invocation.method(
          #lastDataReceived,
          [],
        ),
        returnValue: _FakeDuration_26(
          this,
          Invocation.method(
            #lastDataReceived,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDuration_26(
          this,
          Invocation.method(
            #lastDataReceived,
            [],
          ),
        ),
      ) as Duration);

  @override
  bool isActiveConnection() => (super.noSuchMethod(
        Invocation.method(
          #isActiveConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool wasOpen() => (super.noSuchMethod(
        Invocation.method(
          #wasOpen,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isClosedConnection() => (super.noSuchMethod(
        Invocation.method(
          #isClosedConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isValidGameConnection() => (super.noSuchMethod(
        Invocation.method(
          #isValidGameConnection,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void sampleLatency(Duration? latency) => super.noSuchMethod(
        Invocation.method(
          #sampleLatency,
          [latency],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration expectedLatency() => (super.noSuchMethod(
        Invocation.method(
          #expectedLatency,
          [],
        ),
        returnValue: _FakeDuration_26(
          this,
          Invocation.method(
            #expectedLatency,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDuration_26(
          this,
          Invocation.method(
            #expectedLatency,
            [],
          ),
        ),
      ) as Duration);

  @override
  _i11.ReliableHelper reliableHelper() => (super.noSuchMethod(
        Invocation.method(
          #reliableHelper,
          [],
        ),
        returnValue: _FakeReliableHelper_27(
          this,
          Invocation.method(
            #reliableHelper,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeReliableHelper_27(
          this,
          Invocation.method(
            #reliableHelper,
            [],
          ),
        ),
      ) as _i11.ReliableHelper);

  @override
  int currentFrameRate() => (super.noSuchMethod(
        Invocation.method(
          #currentFrameRate,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String stats() => (super.noSuchMethod(
        Invocation.method(
          #stats,
          [],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #stats,
            [],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #stats,
            [],
          ),
        ),
      ) as String);

  @override
  String frameStats() => (super.noSuchMethod(
        Invocation.method(
          #frameStats,
          [],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #frameStats,
            [],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #frameStats,
            [],
          ),
        ),
      ) as String);

  @override
  int uniqueDataReceiptString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #uniqueDataReceiptString,
          [key],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [KeyState].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyState extends _i1.Mock implements _i5.KeyState {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i4.WormWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
        returnValueForMissingStub: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
      ) as _i4.WormWorld);

  @override
  bool get debug => (super.noSuchMethod(
        Invocation.getter(#debug),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get remoteState => (super.noSuchMethod(
        Invocation.getter(#remoteState),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Map<int, double> get keysDown => (super.noSuchMethod(
        Invocation.getter(#keysDown),
        returnValue: <int, double>{},
        returnValueForMissingStub: <int, double>{},
      ) as Map<int, double>);

  @override
  set world(_i4.WormWorld? _world) => super.noSuchMethod(
        Invocation.setter(
          #world,
          _world,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debug(bool? _debug) => super.noSuchMethod(
        Invocation.setter(
          #debug,
          _debug,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set remoteState(bool? _remoteState) => super.noSuchMethod(
        Invocation.setter(
          #remoteState,
          _remoteState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set keysDown(Map<int, double>? _keysDown) => super.noSuchMethod(
        Invocation.setter(
          #keysDown,
          _keysDown,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onKeyDown(
    int? keyCode, [
    double? strength = 0.999,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #onKeyDown,
          [
            keyCode,
            strength,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onKeyUp(int? keyCode) => super.noSuchMethod(
        Invocation.method(
          #onKeyUp,
          [keyCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool keyIsDown(
    num? key, [
    double? strength = 0.999,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #keyIsDown,
          [
            key,
            strength,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double? keyIsDownStrength(num? key) => (super.noSuchMethod(
        Invocation.method(
          #keyIsDownStrength,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  void setEnabledKeys(_i12.KeyStateProto? proto) => super.noSuchMethod(
        Invocation.method(
          #setEnabledKeys,
          [proto],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.KeyStateProto toKeyStateProto() => (super.noSuchMethod(
        Invocation.method(
          #toKeyStateProto,
          [],
        ),
        returnValue: _FakeKeyStateProto_28(
          this,
          Invocation.method(
            #toKeyStateProto,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeKeyStateProto_28(
          this,
          Invocation.method(
            #toKeyStateProto,
            [],
          ),
        ),
      ) as _i12.KeyStateProto);

  @override
  Map<String, bool> getEnabledState() => (super.noSuchMethod(
        Invocation.method(
          #getEnabledState,
          [],
        ),
        returnValue: <String, bool>{},
        returnValueForMissingStub: <String, bool>{},
      ) as Map<String, bool>);

  @override
  dynamic registerListener(
    int? key,
    dynamic f,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerListener,
          [
            key,
            f,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration lastUserInput() => (super.noSuchMethod(
        Invocation.method(
          #lastUserInput,
          [],
        ),
        returnValue: _FakeDuration_26(
          this,
          Invocation.method(
            #lastUserInput,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDuration_26(
          this,
          Invocation.method(
            #lastUserInput,
            [],
          ),
        ),
      ) as Duration);
}

/// A class which mocks [GameState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameState extends _i1.Mock implements _i5.GameState {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i12.GameStateProto get gameStateProto => (super.noSuchMethod(
        Invocation.getter(#gameStateProto),
        returnValue: _FakeGameStateProto_29(
          this,
          Invocation.getter(#gameStateProto),
        ),
        returnValueForMissingStub: _FakeGameStateProto_29(
          this,
          Invocation.getter(#gameStateProto),
        ),
      ) as _i12.GameStateProto);

  @override
  void updateWithLocalKeyState(
    String? connectionId,
    _i5.KeyState? localState,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateWithLocalKeyState,
          [
            connectionId,
            localState,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.KeyState? getKeyStateFor(String? connectionId) => (super.noSuchMethod(
        Invocation.method(
          #getKeyStateFor,
          [connectionId],
        ),
        returnValueForMissingStub: null,
      ) as _i5.KeyState?);

  @override
  bool retrieveAndResetUrgentData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveAndResetUrgentData,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void markAsUrgent() => super.noSuchMethod(
        Invocation.method(
          #markAsUrgent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isConnected(
    String? a,
    String? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [
            a,
            b,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Set<_i12.ConnectionInfoProto> playerConnections(String? a) =>
      (super.noSuchMethod(
        Invocation.method(
          #playerConnections,
          [a],
        ),
        returnValue: <_i12.ConnectionInfoProto>{},
        returnValueForMissingStub: <_i12.ConnectionInfoProto>{},
      ) as Set<_i12.ConnectionInfoProto>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isInGame(String? id) => (super.noSuchMethod(
        Invocation.method(
          #isInGame,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasWinner() => (super.noSuchMethod(
        Invocation.method(
          #hasWinner,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasCommander() => (super.noSuchMethod(
        Invocation.method(
          #hasCommander,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isAtMaxPlayers() => (super.noSuchMethod(
        Invocation.method(
          #isAtMaxPlayers,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i12.PlayerInfoProto> playerInfoList() => (super.noSuchMethod(
        Invocation.method(
          #playerInfoList,
          [],
        ),
        returnValue: <_i12.PlayerInfoProto>[],
        returnValueForMissingStub: <_i12.PlayerInfoProto>[],
      ) as List<_i12.PlayerInfoProto>);

  @override
  void addPlayerInfo(_i12.PlayerInfoProto? info) => super.noSuchMethod(
        Invocation.method(
          #addPlayerInfo,
          [info],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateFromMap(_i12.GameStateProto? gameState) => super.noSuchMethod(
        Invocation.method(
          #updateFromMap,
          [gameState],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.PlayerInfoProto? removeByConnectionId(
    _i4.WormWorld? world,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeByConnectionId,
          [
            world,
            id,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i12.PlayerInfoProto?);

  @override
  dynamic convertToServer(
    _i4.WormWorld? world,
    dynamic selfConnectionId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #convertToServer,
          [
            world,
            selfConnectionId,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.PlayerInfoProto? playerInfoByConnectionId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #playerInfoByConnectionId,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i12.PlayerInfoProto?);

  @override
  _i12.PlayerInfoProto? getRemovedPlayerInfo(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getRemovedPlayerInfo,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i12.PlayerInfoProto?);

  @override
  _i12.PlayerInfoProto playerInfoBySpriteId(int? id) => (super.noSuchMethod(
        Invocation.method(
          #playerInfoBySpriteId,
          [id],
        ),
        returnValue: _FakePlayerInfoProto_30(
          this,
          Invocation.method(
            #playerInfoBySpriteId,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakePlayerInfoProto_30(
          this,
          Invocation.method(
            #playerInfoBySpriteId,
            [id],
          ),
        ),
      ) as _i12.PlayerInfoProto);

  @override
  int getNextUsablePlayerSpriteId(_i4.WormWorld? world) => (super.noSuchMethod(
        Invocation.method(
          #getNextUsablePlayerSpriteId,
          [world],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [SpriteIndex].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpriteIndex extends _i1.Mock implements _i10.SpriteIndex {
  @override
  int get spriteNetworkId => (super.noSuchMethod(
        Invocation.getter(#spriteNetworkId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set spriteNetworkId(int? _spriteNetworkId) => super.noSuchMethod(
        Invocation.setter(
          #spriteNetworkId,
          _spriteNetworkId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.MovingSprite? CreateSpriteFromNetwork(
    _i4.WormWorld? world,
    int? networkId,
    _i10.SpriteConstructor? constructor,
    _i9.ConnectionWrapper? wrapper,
    _i12.SpriteUpdate? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #CreateSpriteFromNetwork,
          [
            world,
            networkId,
            constructor,
            wrapper,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i10.MovingSprite?);

  @override
  void addSprite(_i10.Sprite? sprite) => super.noSuchMethod(
        Invocation.method(
          #addSprite,
          [sprite],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.LocalPlayerSprite? maybeResurrectPlayerSprite(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeResurrectPlayerSprite,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i10.LocalPlayerSprite?);

  @override
  List<_i10.Sprite> putPendingSpritesInWorld() => (super.noSuchMethod(
        Invocation.method(
          #putPendingSpritesInWorld,
          [],
        ),
        returnValue: <_i10.Sprite>[],
        returnValueForMissingStub: <_i10.Sprite>[],
      ) as List<_i10.Sprite>);

  @override
  void replaceSprite(
    int? id,
    _i10.Sprite? sprite,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceSprite,
          [
            id,
            sprite,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeSprite(int? id) => super.noSuchMethod(
        Invocation.method(
          #removeSprite,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePending() => super.noSuchMethod(
        Invocation.method(
          #removePending,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<int> spriteIds() => (super.noSuchMethod(
        Invocation.method(
          #spriteIds,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as Iterable<int>);

  @override
  List<int> getAndClearNetworkRemovals() => (super.noSuchMethod(
        Invocation.method(
          #getAndClearNetworkRemovals,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void operator []=(
    int? i,
    _i10.Sprite? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            i,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasSprite(int? id) => (super.noSuchMethod(
        Invocation.method(
          #hasSprite,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [ChunkHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockChunkHelper extends _i1.Mock implements _i13.ChunkHelper {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i13.DataCounter get counter => (super.noSuchMethod(
        Invocation.getter(#counter),
        returnValue: _FakeDataCounter_31(
          this,
          Invocation.getter(#counter),
        ),
        returnValueForMissingStub: _FakeDataCounter_31(
          this,
          Invocation.getter(#counter),
        ),
      ) as _i13.DataCounter);

  @override
  set counter(_i13.DataCounter? _counter) => super.noSuchMethod(
        Invocation.setter(
          #counter,
          _counter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replyWithImageData(
    _i12.ResourceRequest? request,
    _i9.ConnectionWrapper? connection,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replyWithImageData,
          [
            request,
            connection,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void parseImageChunkResponse(
    _i12.ResourceResponse? response,
    dynamic connection,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #parseImageChunkResponse,
          [
            response,
            connection,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestNetworkData(
    Map<String, _i9.ConnectionWrapper>? connections,
    double? secondsDuration,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #requestNetworkData,
          [
            connections,
            secondsDuration,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestSpecificNetworkData(
    Map<String, _i9.ConnectionWrapper>? connections,
    double? secondsDuration,
    Iterable<int>? IdsToFetch,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #requestSpecificNetworkData,
          [
            connections,
            secondsDuration,
            IdsToFetch,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.ResourceRequest buildImageChunkRequest(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildImageChunkRequest,
          [index],
        ),
        returnValue: _FakeResourceRequest_32(
          this,
          Invocation.method(
            #buildImageChunkRequest,
            [index],
          ),
        ),
        returnValueForMissingStub: _FakeResourceRequest_32(
          this,
          Invocation.method(
            #buildImageChunkRequest,
            [index],
          ),
        ),
      ) as _i12.ResourceRequest);

  @override
  double getCompleteRatio(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getCompleteRatio,
          [index],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  String getTransferSpeed() => (super.noSuchMethod(
        Invocation.method(
          #getTransferSpeed,
          [],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #getTransferSpeed,
            [],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #getTransferSpeed,
            [],
          ),
        ),
      ) as String);

  @override
  _i18.Stream<int> bytesPerSecondSamples() => (super.noSuchMethod(
        Invocation.method(
          #bytesPerSecondSamples,
          [],
        ),
        returnValue: _i18.Stream<int>.empty(),
        returnValueForMissingStub: _i18.Stream<int>.empty(),
      ) as _i18.Stream<int>);

  @override
  Map<String, int> failuresByConnection() => (super.noSuchMethod(
        Invocation.method(
          #failuresByConnection,
          [],
        ),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);

  @override
  void setChunkSizeForTest(int? chunkSize) => super.noSuchMethod(
        Invocation.method(
          #setChunkSizeForTest,
          [chunkSize],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalPlayerSprite].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPlayerSprite extends _i1.Mock implements _i10.LocalPlayerSprite {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i4.WormWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
        returnValueForMissingStub: _FakeWormWorld_2(
          this,
          Invocation.getter(#world),
        ),
      ) as _i4.WormWorld);

  @override
  int get health => (super.noSuchMethod(
        Invocation.getter(#health),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i12.PlayerInfoProto get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: _FakePlayerInfoProto_30(
          this,
          Invocation.getter(#info),
        ),
        returnValueForMissingStub: _FakePlayerInfoProto_30(
          this,
          Invocation.getter(#info),
        ),
      ) as _i12.PlayerInfoProto);

  @override
  bool get onGround => (super.noSuchMethod(
        Invocation.getter(#onGround),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get spawnIn => (super.noSuchMethod(
        Invocation.getter(#spawnIn),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i10.MovingSprite get gun => (super.noSuchMethod(
        Invocation.getter(#gun),
        returnValue: _FakeMovingSprite_33(
          this,
          Invocation.getter(#gun),
        ),
        returnValueForMissingStub: _FakeMovingSprite_33(
          this,
          Invocation.getter(#gun),
        ),
      ) as _i10.MovingSprite);

  @override
  int get shieldPoints => (super.noSuchMethod(
        Invocation.getter(#shieldPoints),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set world(_i4.WormWorld? _world) => super.noSuchMethod(
        Invocation.setter(
          #world,
          _world,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set health(int? _health) => super.noSuchMethod(
        Invocation.setter(
          #health,
          _health,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set info(_i12.PlayerInfoProto? _info) => super.noSuchMethod(
        Invocation.setter(
          #info,
          _info,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rope(_i10.Rope? _rope) => super.noSuchMethod(
        Invocation.setter(
          #rope,
          _rope,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set weaponState(_i21.WeaponState? _weaponState) => super.noSuchMethod(
        Invocation.setter(
          #weaponState,
          _weaponState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onGround(bool? _onGround) => super.noSuchMethod(
        Invocation.setter(
          #onGround,
          _onGround,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set spawnIn(double? _spawnIn) => super.noSuchMethod(
        Invocation.setter(
          #spawnIn,
          _spawnIn,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gun(_i10.MovingSprite? _gun) => super.noSuchMethod(
        Invocation.setter(
          #gun,
          _gun,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set shieldPoints(int? shieldPoints) => super.noSuchMethod(
        Invocation.setter(
          #shieldPoints,
          shieldPoints,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set jetPackSec(double? secs) => super.noSuchMethod(
        Invocation.setter(
          #jetPackSec,
          secs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Vec2 get velocity => (super.noSuchMethod(
        Invocation.getter(#velocity),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#velocity),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#velocity),
        ),
      ) as _i8.Vec2);

  @override
  double get rotationVelocity => (super.noSuchMethod(
        Invocation.getter(#rotationVelocity),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i8.Vec2 get acceleration => (super.noSuchMethod(
        Invocation.getter(#acceleration),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#acceleration),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#acceleration),
        ),
      ) as _i8.Vec2);

  @override
  double get gravityAffect => (super.noSuchMethod(
        Invocation.getter(#gravityAffect),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get collision => (super.noSuchMethod(
        Invocation.getter(#collision),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get removeOutOfBounds => (super.noSuchMethod(
        Invocation.getter(#removeOutOfBounds),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get flags => (super.noSuchMethod(
        Invocation.getter(#flags),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set velocity(_i8.Vec2? _velocity) => super.noSuchMethod(
        Invocation.setter(
          #velocity,
          _velocity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rotationVelocity(double? _rotationVelocity) => super.noSuchMethod(
        Invocation.setter(
          #rotationVelocity,
          _rotationVelocity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set acceleration(_i8.Vec2? _acceleration) => super.noSuchMethod(
        Invocation.setter(
          #acceleration,
          _acceleration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gravityAffect(double? _gravityAffect) => super.noSuchMethod(
        Invocation.setter(
          #gravityAffect,
          _gravityAffect,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set collision(bool? _collision) => super.noSuchMethod(
        Invocation.setter(
          #collision,
          _collision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set removeOutOfBounds(bool? _removeOutOfBounds) => super.noSuchMethod(
        Invocation.setter(
          #removeOutOfBounds,
          _removeOutOfBounds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set flags(int? _flags) => super.noSuchMethod(
        Invocation.setter(
          #flags,
          _flags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set owner(_i10.LocalPlayerSprite? _owner) => super.noSuchMethod(
        Invocation.setter(
          #owner,
          _owner,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set baseGravity(double? _baseGravity) => super.noSuchMethod(
        Invocation.setter(
          #baseGravity,
          _baseGravity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Vec2 get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#position),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#position),
        ),
      ) as _i8.Vec2);

  @override
  _i8.Vec2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeVec2_7(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.getter(#size),
        ),
      ) as _i8.Vec2);

  @override
  int get imageId => (super.noSuchMethod(
        Invocation.getter(#imageId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  double get angle => (super.noSuchMethod(
        Invocation.getter(#angle),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i10.SpriteType get spriteType => (super.noSuchMethod(
        Invocation.getter(#spriteType),
        returnValue: _i10.SpriteType.IMAGE,
        returnValueForMissingStub: _i10.SpriteType.IMAGE,
      ) as _i10.SpriteType);

  @override
  String get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#color),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#color),
        ),
      ) as String);

  @override
  bool get invisibleOutsideCanvas => (super.noSuchMethod(
        Invocation.getter(#invisibleOutsideCanvas),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get frameIndex => (super.noSuchMethod(
        Invocation.getter(#frameIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get frames => (super.noSuchMethod(
        Invocation.getter(#frames),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  num get frameWidth => (super.noSuchMethod(
        Invocation.getter(#frameWidth),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  bool get lockFrame => (super.noSuchMethod(
        Invocation.getter(#lockFrame),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get lifeTime => (super.noSuchMethod(
        Invocation.getter(#lifeTime),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.NetworkType get networkType => (super.noSuchMethod(
        Invocation.getter(#networkType),
        returnValue: _i10.NetworkType.LOCAL_ONLY,
        returnValueForMissingStub: _i10.NetworkType.LOCAL_ONLY,
      ) as _i10.NetworkType);

  @override
  int get fullFramesOverNetwork => (super.noSuchMethod(
        Invocation.getter(#fullFramesOverNetwork),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get remove => (super.noSuchMethod(
        Invocation.getter(#remove),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set position(_i8.Vec2? _position) => super.noSuchMethod(
        Invocation.setter(
          #position,
          _position,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set size(_i8.Vec2? _size) => super.noSuchMethod(
        Invocation.setter(
          #size,
          _size,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set imageId(int? _imageId) => super.noSuchMethod(
        Invocation.setter(
          #imageId,
          _imageId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set angle(double? _angle) => super.noSuchMethod(
        Invocation.setter(
          #angle,
          _angle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set spriteType(_i10.SpriteType? _spriteType) => super.noSuchMethod(
        Invocation.setter(
          #spriteType,
          _spriteType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set spawn_sound(_i20.Sound? _spawn_sound) => super.noSuchMethod(
        Invocation.setter(
          #spawn_sound,
          _spawn_sound,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set color(String? _color) => super.noSuchMethod(
        Invocation.setter(
          #color,
          _color,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set invisibleOutsideCanvas(bool? _invisibleOutsideCanvas) =>
      super.noSuchMethod(
        Invocation.setter(
          #invisibleOutsideCanvas,
          _invisibleOutsideCanvas,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set frameIndex(int? _frameIndex) => super.noSuchMethod(
        Invocation.setter(
          #frameIndex,
          _frameIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set frames(int? _frames) => super.noSuchMethod(
        Invocation.setter(
          #frames,
          _frames,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set frameWidth(num? _frameWidth) => super.noSuchMethod(
        Invocation.setter(
          #frameWidth,
          _frameWidth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lockFrame(bool? _lockFrame) => super.noSuchMethod(
        Invocation.setter(
          #lockFrame,
          _lockFrame,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lifeTime(int? _lifeTime) => super.noSuchMethod(
        Invocation.setter(
          #lifeTime,
          _lifeTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set networkId(int? _networkId) => super.noSuchMethod(
        Invocation.setter(
          #networkId,
          _networkId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set networkType(_i10.NetworkType? _networkType) => super.noSuchMethod(
        Invocation.setter(
          #networkType,
          _networkType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ownerId(String? _ownerId) => super.noSuchMethod(
        Invocation.setter(
          #ownerId,
          _ownerId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fullFramesOverNetwork(int? _fullFramesOverNetwork) => super.noSuchMethod(
        Invocation.setter(
          #fullFramesOverNetwork,
          _fullFramesOverNetwork,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set remove(bool? _remove) => super.noSuchMethod(
        Invocation.setter(
          #remove,
          _remove,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, int> getControls() => (super.noSuchMethod(
        Invocation.method(
          #getControls,
          [],
        ),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);

  @override
  bool isMappedKey(int? code) => (super.noSuchMethod(
        Invocation.method(
          #isMappedKey,
          [code],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool drawWeaponHelpers() => (super.noSuchMethod(
        Invocation.method(
          #drawWeaponHelpers,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasCommanderToOwnerData() => (super.noSuchMethod(
        Invocation.method(
          #hasCommanderToOwnerData,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i12.ExtraSpriteData getCommanderToOwnerData() => (super.noSuchMethod(
        Invocation.method(
          #getCommanderToOwnerData,
          [],
        ),
        returnValue: _FakeExtraSpriteData_34(
          this,
          Invocation.method(
            #getCommanderToOwnerData,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeExtraSpriteData_34(
          this,
          Invocation.method(
            #getCommanderToOwnerData,
            [],
          ),
        ),
      ) as _i12.ExtraSpriteData);

  @override
  bool commanderToOwnerData(_i12.ExtraSpriteData? data) => (super.noSuchMethod(
        Invocation.method(
          #commanderToOwnerData,
          [data],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool inGame() => (super.noSuchMethod(
        Invocation.method(
          #inGame,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic draw(
    _i16.CanvasRenderingContext2D? context,
    bool? debug,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #draw,
          [
            context,
            debug,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool drawHealthBar(_i16.CanvasRenderingContext2D? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #drawHealthBar,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool maybeRespawn(double? duration) => (super.noSuchMethod(
        Invocation.method(
          #maybeRespawn,
          [duration],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic frame(
    double? duration,
    int? frames, [
    _i8.Vec2? gravity,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #frame,
          [
            duration,
            frames,
            gravity,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool checkControlKeys(double? duration) => (super.noSuchMethod(
        Invocation.method(
          #checkControlKeys,
          [duration],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int extraSendFlags() => (super.noSuchMethod(
        Invocation.method(
          #extraSendFlags,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool checkMobileControls(
    int? xD,
    dynamic yD,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkMobileControls,
          [
            xD,
            yD,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool checkShouldFire() => (super.noSuchMethod(
        Invocation.method(
          #checkShouldFire,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool takesDamage() => (super.noSuchMethod(
        Invocation.method(
          #takesDamage,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void takeDamage(
    int? damage,
    _i10.LocalPlayerSprite? inflictor,
    _i10.Mod? mod,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #takeDamage,
          [
            damage,
            inflictor,
            mod,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.KeyState getKeyState() => (super.noSuchMethod(
        Invocation.method(
          #getKeyState,
          [],
        ),
        returnValue: _FakeKeyState_12(
          this,
          Invocation.method(
            #getKeyState,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeKeyState_12(
          this,
          Invocation.method(
            #getKeyState,
            [],
          ),
        ),
      ) as _i5.KeyState);

  @override
  bool listenFor(
    String? key,
    dynamic f,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenFor,
          [
            key,
            f,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool keyIsDown(String? key) => (super.noSuchMethod(
        Invocation.method(
          #keyIsDown,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double? keyIsDownStrength(String? key) => (super.noSuchMethod(
        Invocation.method(
          #keyIsDownStrength,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  _i12.ExtraSpriteData addExtraNetworkData() => (super.noSuchMethod(
        Invocation.method(
          #addExtraNetworkData,
          [],
        ),
        returnValue: _FakeExtraSpriteData_34(
          this,
          Invocation.method(
            #addExtraNetworkData,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeExtraSpriteData_34(
          this,
          Invocation.method(
            #addExtraNetworkData,
            [],
          ),
        ),
      ) as _i12.ExtraSpriteData);

  @override
  void parseExtraNetworkData(_i12.ExtraSpriteData? data) => super.noSuchMethod(
        Invocation.method(
          #parseExtraNetworkData,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.SpriteConstructor remoteRepresentation() => (super.noSuchMethod(
        Invocation.method(
          #remoteRepresentation,
          [],
        ),
        returnValue: _i10.SpriteConstructor.DO_NOT_CREATE,
        returnValueForMissingStub: _i10.SpriteConstructor.DO_NOT_CREATE,
      ) as _i10.SpriteConstructor);

  @override
  void setImage(
    int? imageId,
    int? frames,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setImage,
          [
            imageId,
            frames,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setImageWithLockedFrame(
    int? imageId,
    int? frames,
    int? lockedFrame,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setImageWithLockedFrame,
          [
            imageId,
            frames,
            lockedFrame,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCenter(_i8.Vec2? center) => super.noSuchMethod(
        Invocation.method(
          #setCenter,
          [center],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double getRadius() => (super.noSuchMethod(
        Invocation.method(
          #getRadius,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  void setRadius(double? radius) => super.noSuchMethod(
        Invocation.method(
          #setRadius,
          [radius],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Vec2 centerPoint() => (super.noSuchMethod(
        Invocation.method(
          #centerPoint,
          [],
        ),
        returnValue: _FakeVec2_7(
          this,
          Invocation.method(
            #centerPoint,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeVec2_7(
          this,
          Invocation.method(
            #centerPoint,
            [],
          ),
        ),
      ) as _i8.Vec2);

  @override
  dynamic setColor(_i16.CanvasRenderingContext2D? context) =>
      super.noSuchMethod(
        Invocation.method(
          #setColor,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool remoteControlled() => (super.noSuchMethod(
        Invocation.method(
          #remoteControlled,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic drawRect(_i16.CanvasRenderingContext2D? context) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRect,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic drawCircle(_i16.CanvasRenderingContext2D? context) =>
      super.noSuchMethod(
        Invocation.method(
          #drawCircle,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double distanceTo(_i10.Sprite? other) => (super.noSuchMethod(
        Invocation.method(
          #distanceTo,
          [other],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [PlayerWorldSelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerWorldSelector extends _i1.Mock
    implements _i4.PlayerWorldSelector {
  @override
  void maybeSelectPlayerOrMap() => super.noSuchMethod(
        Invocation.method(
          #maybeSelectPlayerOrMap,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool worldSelectedAndLoaded() => (super.noSuchMethod(
        Invocation.method(
          #worldSelectedAndLoaded,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool playerSelected() => (super.noSuchMethod(
        Invocation.method(
          #playerSelected,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void frame(double? duration) => super.noSuchMethod(
        Invocation.method(
          #frame,
          [duration],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawCenteredText(
    String? text, [
    int? y = 0,
    int? size = 20,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #drawCenteredText,
          [
            text,
            y,
            size,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMapForTest(String? name) => super.noSuchMethod(
        Invocation.method(
          #setMapForTest,
          [name],
        ),
        returnValueForMissingStub: null,
      );
}
